// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/seed.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Seed_AssignNodeID_FullMethodName = "/colonio.seed.v1.Seed/AssignNodeID"
	Seed_Relay_FullMethodName        = "/colonio.seed.v1.Seed/Relay"
	Seed_PollRelaying_FullMethodName = "/colonio.seed.v1.Seed/PollRelaying"
)

// SeedClient is the client API for Seed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedClient interface {
	AssignNodeID(ctx context.Context, in *AssignNodeIDRequest, opts ...grpc.CallOption) (*AssignNodeIDResponse, error)
	Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error)
	PollRelaying(ctx context.Context, in *PollRelayingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PollRelayingResponse], error)
}

type seedClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedClient(cc grpc.ClientConnInterface) SeedClient {
	return &seedClient{cc}
}

func (c *seedClient) AssignNodeID(ctx context.Context, in *AssignNodeIDRequest, opts ...grpc.CallOption) (*AssignNodeIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignNodeIDResponse)
	err := c.cc.Invoke(ctx, Seed_AssignNodeID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedClient) Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelayResponse)
	err := c.cc.Invoke(ctx, Seed_Relay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedClient) PollRelaying(ctx context.Context, in *PollRelayingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PollRelayingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Seed_ServiceDesc.Streams[0], Seed_PollRelaying_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PollRelayingRequest, PollRelayingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Seed_PollRelayingClient = grpc.ServerStreamingClient[PollRelayingResponse]

// SeedServer is the server API for Seed service.
// All implementations must embed UnimplementedSeedServer
// for forward compatibility.
type SeedServer interface {
	AssignNodeID(context.Context, *AssignNodeIDRequest) (*AssignNodeIDResponse, error)
	Relay(context.Context, *RelayRequest) (*RelayResponse, error)
	PollRelaying(*PollRelayingRequest, grpc.ServerStreamingServer[PollRelayingResponse]) error
	mustEmbedUnimplementedSeedServer()
}

// UnimplementedSeedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeedServer struct{}

func (UnimplementedSeedServer) AssignNodeID(context.Context, *AssignNodeIDRequest) (*AssignNodeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignNodeID not implemented")
}
func (UnimplementedSeedServer) Relay(context.Context, *RelayRequest) (*RelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relay not implemented")
}
func (UnimplementedSeedServer) PollRelaying(*PollRelayingRequest, grpc.ServerStreamingServer[PollRelayingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PollRelaying not implemented")
}
func (UnimplementedSeedServer) mustEmbedUnimplementedSeedServer() {}
func (UnimplementedSeedServer) testEmbeddedByValue()              {}

// UnsafeSeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeedServer will
// result in compilation errors.
type UnsafeSeedServer interface {
	mustEmbedUnimplementedSeedServer()
}

func RegisterSeedServer(s grpc.ServiceRegistrar, srv SeedServer) {
	// If the following call pancis, it indicates UnimplementedSeedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Seed_ServiceDesc, srv)
}

func _Seed_AssignNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServer).AssignNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seed_AssignNodeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServer).AssignNodeID(ctx, req.(*AssignNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seed_Relay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServer).Relay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seed_Relay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServer).Relay(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seed_PollRelaying_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PollRelayingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeedServer).PollRelaying(m, &grpc.GenericServerStream[PollRelayingRequest, PollRelayingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Seed_PollRelayingServer = grpc.ServerStreamingServer[PollRelayingResponse]

// Seed_ServiceDesc is the grpc.ServiceDesc for Seed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colonio.seed.v1.Seed",
	HandlerType: (*SeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignNodeID",
			Handler:    _Seed_AssignNodeID_Handler,
		},
		{
			MethodName: "Relay",
			Handler:    _Seed_Relay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollRelaying",
			Handler:       _Seed_PollRelaying_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/seed.proto",
}
