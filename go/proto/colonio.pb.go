// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: colonio.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// basic types
type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinate) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinate) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type NodeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id0  uint64 `protobuf:"varint,2,opt,name=id0,proto3" json:"id0,omitempty"`
	Id1  uint64 `protobuf:"varint,3,opt,name=id1,proto3" json:"id1,omitempty"`
}

func (x *NodeID) Reset() {
	*x = NodeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeID) ProtoMessage() {}

func (x *NodeID) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeID.ProtoReflect.Descriptor instead.
func (*NodeID) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{1}
}

func (x *NodeID) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NodeID) GetId0() uint64 {
	if x != nil {
		return x.Id0
	}
	return 0
}

func (x *NodeID) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Value_BoolV
	//	*Value_IntV
	//	*Value_DoubleV
	//	*Value_StringV
	//	*Value_BinaryV
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{2}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetBoolV() bool {
	if x, ok := x.GetValue().(*Value_BoolV); ok {
		return x.BoolV
	}
	return false
}

func (x *Value) GetIntV() int64 {
	if x, ok := x.GetValue().(*Value_IntV); ok {
		return x.IntV
	}
	return 0
}

func (x *Value) GetDoubleV() float64 {
	if x, ok := x.GetValue().(*Value_DoubleV); ok {
		return x.DoubleV
	}
	return 0
}

func (x *Value) GetStringV() []byte {
	if x, ok := x.GetValue().(*Value_StringV); ok {
		return x.StringV
	}
	return nil
}

func (x *Value) GetBinaryV() []byte {
	if x, ok := x.GetValue().(*Value_BinaryV); ok {
		return x.BinaryV
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_BoolV struct {
	BoolV bool `protobuf:"varint,1,opt,name=bool_v,json=boolV,proto3,oneof"`
}

type Value_IntV struct {
	IntV int64 `protobuf:"varint,2,opt,name=int_v,json=intV,proto3,oneof"`
}

type Value_DoubleV struct {
	DoubleV float64 `protobuf:"fixed64,3,opt,name=double_v,json=doubleV,proto3,oneof"`
}

type Value_StringV struct {
	StringV []byte `protobuf:"bytes,4,opt,name=string_v,json=stringV,proto3,oneof"`
}

type Value_BinaryV struct {
	BinaryV []byte `protobuf:"bytes,5,opt,name=binary_v,json=binaryV,proto3,oneof"`
}

func (*Value_BoolV) isValue_Value() {}

func (*Value_IntV) isValue_Value() {}

func (*Value_DoubleV) isValue_Value() {}

func (*Value_StringV) isValue_Value() {}

func (*Value_BinaryV) isValue_Value() {}

// node-node packet container
type NodePackets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet []*NodePacket `protobuf:"bytes,1,rep,name=packet,proto3" json:"packet,omitempty"`
}

func (x *NodePackets) Reset() {
	*x = NodePackets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePackets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePackets) ProtoMessage() {}

func (x *NodePackets) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePackets.ProtoReflect.Descriptor instead.
func (*NodePackets) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{3}
}

func (x *NodePackets) GetPacket() []*NodePacket {
	if x != nil {
		return x.Packet
	}
	return nil
}

type NodePacketHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstNid   *NodeID `protobuf:"bytes,1,opt,name=dst_nid,json=dstNid,proto3" json:"dst_nid,omitempty"`
	SrcNid   *NodeID `protobuf:"bytes,2,opt,name=src_nid,json=srcNid,proto3" json:"src_nid,omitempty"`
	HopCount uint32  `protobuf:"varint,3,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Mode     uint32  `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *NodePacketHead) Reset() {
	*x = NodePacketHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePacketHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePacketHead) ProtoMessage() {}

func (x *NodePacketHead) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePacketHead.ProtoReflect.Descriptor instead.
func (*NodePacketHead) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{4}
}

func (x *NodePacketHead) GetDstNid() *NodeID {
	if x != nil {
		return x.DstNid
	}
	return nil
}

func (x *NodePacketHead) GetSrcNid() *NodeID {
	if x != nil {
		return x.SrcNid
	}
	return nil
}

func (x *NodePacketHead) GetHopCount() uint32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *NodePacketHead) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type NodePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable head if index is 0.
	Head *NodePacketHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// ID is common to sequence of packets.
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// index decreses by 1 in a sequance of packets.
	Index   uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NodePacket) Reset() {
	*x = NodePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePacket) ProtoMessage() {}

func (x *NodePacket) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePacket.ProtoReflect.Descriptor instead.
func (*NodePacket) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{5}
}

func (x *NodePacket) GetHead() *NodePacketHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *NodePacket) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodePacket) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NodePacket) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SeedPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*SeedPacket_Error
	//	*SeedPacket_Auth
	//	*SeedPacket_AuthResponse
	//	*SeedPacket_Ping
	//	*SeedPacket_Hint
	//	*SeedPacket_RequireRandom
	//	*SeedPacket_RelayPacket
	Payload isSeedPacket_Payload `protobuf_oneof:"Payload"`
}

func (x *SeedPacket) Reset() {
	*x = SeedPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedPacket) ProtoMessage() {}

func (x *SeedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedPacket.ProtoReflect.Descriptor instead.
func (*SeedPacket) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{6}
}

func (m *SeedPacket) GetPayload() isSeedPacket_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SeedPacket) GetError() *Error {
	if x, ok := x.GetPayload().(*SeedPacket_Error); ok {
		return x.Error
	}
	return nil
}

func (x *SeedPacket) GetAuth() *SeedAuth {
	if x, ok := x.GetPayload().(*SeedPacket_Auth); ok {
		return x.Auth
	}
	return nil
}

func (x *SeedPacket) GetAuthResponse() *SeedAuthResponse {
	if x, ok := x.GetPayload().(*SeedPacket_AuthResponse); ok {
		return x.AuthResponse
	}
	return nil
}

func (x *SeedPacket) GetPing() bool {
	if x, ok := x.GetPayload().(*SeedPacket_Ping); ok {
		return x.Ping
	}
	return false
}

func (x *SeedPacket) GetHint() *SeedHint {
	if x, ok := x.GetPayload().(*SeedPacket_Hint); ok {
		return x.Hint
	}
	return nil
}

func (x *SeedPacket) GetRequireRandom() bool {
	if x, ok := x.GetPayload().(*SeedPacket_RequireRandom); ok {
		return x.RequireRandom
	}
	return false
}

func (x *SeedPacket) GetRelayPacket() *SeedRelayPacket {
	if x, ok := x.GetPayload().(*SeedPacket_RelayPacket); ok {
		return x.RelayPacket
	}
	return nil
}

type isSeedPacket_Payload interface {
	isSeedPacket_Payload()
}

type SeedPacket_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type SeedPacket_Auth struct {
	Auth *SeedAuth `protobuf:"bytes,2,opt,name=auth,proto3,oneof"`
}

type SeedPacket_AuthResponse struct {
	AuthResponse *SeedAuthResponse `protobuf:"bytes,3,opt,name=auth_response,json=authResponse,proto3,oneof"`
}

type SeedPacket_Ping struct {
	Ping bool `protobuf:"varint,4,opt,name=ping,proto3,oneof"`
}

type SeedPacket_Hint struct {
	Hint *SeedHint `protobuf:"bytes,5,opt,name=hint,proto3,oneof"`
}

type SeedPacket_RequireRandom struct {
	RequireRandom bool `protobuf:"varint,6,opt,name=require_random,json=requireRandom,proto3,oneof"`
}

type SeedPacket_RelayPacket struct {
	RelayPacket *SeedRelayPacket `protobuf:"bytes,7,opt,name=relay_packet,json=relayPacket,proto3,oneof"`
}

func (*SeedPacket_Error) isSeedPacket_Payload() {}

func (*SeedPacket_Auth) isSeedPacket_Payload() {}

func (*SeedPacket_AuthResponse) isSeedPacket_Payload() {}

func (*SeedPacket_Ping) isSeedPacket_Payload() {}

func (*SeedPacket_Hint) isSeedPacket_Payload() {}

func (*SeedPacket_RequireRandom) isSeedPacket_Payload() {}

func (*SeedPacket_RelayPacket) isSeedPacket_Payload() {}

// node-seed packet container
type SeedRelayPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstNid   *NodeID        `protobuf:"bytes,1,opt,name=dst_nid,json=dstNid,proto3" json:"dst_nid,omitempty"`
	SrcNid   *NodeID        `protobuf:"bytes,2,opt,name=src_nid,json=srcNid,proto3" json:"src_nid,omitempty"`
	HopCount uint32         `protobuf:"varint,3,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Id       uint32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Mode     uint32         `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Content  *PacketContent `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SeedRelayPacket) Reset() {
	*x = SeedRelayPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedRelayPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedRelayPacket) ProtoMessage() {}

func (x *SeedRelayPacket) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedRelayPacket.ProtoReflect.Descriptor instead.
func (*SeedRelayPacket) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{7}
}

func (x *SeedRelayPacket) GetDstNid() *NodeID {
	if x != nil {
		return x.DstNid
	}
	return nil
}

func (x *SeedRelayPacket) GetSrcNid() *NodeID {
	if x != nil {
		return x.SrcNid
	}
	return nil
}

func (x *SeedRelayPacket) GetHopCount() uint32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *SeedRelayPacket) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeedRelayPacket) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SeedRelayPacket) GetContent() *PacketContent {
	if x != nil {
		return x.Content
	}
	return nil
}

//
type PacketContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*PacketContent_Error
	//	*PacketContent_SignalingIce
	//	*PacketContent_SignalingOffer
	//	*PacketContent_SignalingOfferSuccess
	//	*PacketContent_SignalingOfferFailure
	//	*PacketContent_Routing
	//	*PacketContent_Messaging
	//	*PacketContent_MessagingResponse
	//	*PacketContent_KvsAccept
	//	*PacketContent_KvsAcceptResponse
	//	*PacketContent_KvsBalanceAcceptor
	//	*PacketContent_KvsBalanceProposer
	//	*PacketContent_KvsGet
	//	*PacketContent_KvsGetResponse
	//	*PacketContent_KvsHint
	//	*PacketContent_KvsPrepare
	//	*PacketContent_KvsPrepareResponse
	//	*PacketContent_KvsSet
	//	*PacketContent_KvsSetResponse
	//	*PacketContent_Spread
	//	*PacketContent_SpreadKnock
	//	*PacketContent_SpreadRelay
	//	*PacketContent_SpreadResponse
	Content isPacketContent_Content `protobuf_oneof:"Content"`
}

func (x *PacketContent) Reset() {
	*x = PacketContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketContent) ProtoMessage() {}

func (x *PacketContent) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketContent.ProtoReflect.Descriptor instead.
func (*PacketContent) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{8}
}

func (m *PacketContent) GetContent() isPacketContent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *PacketContent) GetError() *Error {
	if x, ok := x.GetContent().(*PacketContent_Error); ok {
		return x.Error
	}
	return nil
}

func (x *PacketContent) GetSignalingIce() *SignalingICE {
	if x, ok := x.GetContent().(*PacketContent_SignalingIce); ok {
		return x.SignalingIce
	}
	return nil
}

func (x *PacketContent) GetSignalingOffer() *SignalingOffer {
	if x, ok := x.GetContent().(*PacketContent_SignalingOffer); ok {
		return x.SignalingOffer
	}
	return nil
}

func (x *PacketContent) GetSignalingOfferSuccess() *SignalingOfferSuccess {
	if x, ok := x.GetContent().(*PacketContent_SignalingOfferSuccess); ok {
		return x.SignalingOfferSuccess
	}
	return nil
}

func (x *PacketContent) GetSignalingOfferFailure() *SignalingOfferFailure {
	if x, ok := x.GetContent().(*PacketContent_SignalingOfferFailure); ok {
		return x.SignalingOfferFailure
	}
	return nil
}

func (x *PacketContent) GetRouting() *Routing {
	if x, ok := x.GetContent().(*PacketContent_Routing); ok {
		return x.Routing
	}
	return nil
}

func (x *PacketContent) GetMessaging() *Messaging {
	if x, ok := x.GetContent().(*PacketContent_Messaging); ok {
		return x.Messaging
	}
	return nil
}

func (x *PacketContent) GetMessagingResponse() *MessagingResponse {
	if x, ok := x.GetContent().(*PacketContent_MessagingResponse); ok {
		return x.MessagingResponse
	}
	return nil
}

func (x *PacketContent) GetKvsAccept() *KvsAccept {
	if x, ok := x.GetContent().(*PacketContent_KvsAccept); ok {
		return x.KvsAccept
	}
	return nil
}

func (x *PacketContent) GetKvsAcceptResponse() *KvsAcceptResponse {
	if x, ok := x.GetContent().(*PacketContent_KvsAcceptResponse); ok {
		return x.KvsAcceptResponse
	}
	return nil
}

func (x *PacketContent) GetKvsBalanceAcceptor() *KvsBalanceAcceptor {
	if x, ok := x.GetContent().(*PacketContent_KvsBalanceAcceptor); ok {
		return x.KvsBalanceAcceptor
	}
	return nil
}

func (x *PacketContent) GetKvsBalanceProposer() *KvsBalanceProposer {
	if x, ok := x.GetContent().(*PacketContent_KvsBalanceProposer); ok {
		return x.KvsBalanceProposer
	}
	return nil
}

func (x *PacketContent) GetKvsGet() *KvsGet {
	if x, ok := x.GetContent().(*PacketContent_KvsGet); ok {
		return x.KvsGet
	}
	return nil
}

func (x *PacketContent) GetKvsGetResponse() *KvsGetResponse {
	if x, ok := x.GetContent().(*PacketContent_KvsGetResponse); ok {
		return x.KvsGetResponse
	}
	return nil
}

func (x *PacketContent) GetKvsHint() *KvsHint {
	if x, ok := x.GetContent().(*PacketContent_KvsHint); ok {
		return x.KvsHint
	}
	return nil
}

func (x *PacketContent) GetKvsPrepare() *KvsPrepare {
	if x, ok := x.GetContent().(*PacketContent_KvsPrepare); ok {
		return x.KvsPrepare
	}
	return nil
}

func (x *PacketContent) GetKvsPrepareResponse() *KvsPrepareResponse {
	if x, ok := x.GetContent().(*PacketContent_KvsPrepareResponse); ok {
		return x.KvsPrepareResponse
	}
	return nil
}

func (x *PacketContent) GetKvsSet() *KvsSet {
	if x, ok := x.GetContent().(*PacketContent_KvsSet); ok {
		return x.KvsSet
	}
	return nil
}

func (x *PacketContent) GetKvsSetResponse() *KvsSetResponse {
	if x, ok := x.GetContent().(*PacketContent_KvsSetResponse); ok {
		return x.KvsSetResponse
	}
	return nil
}

func (x *PacketContent) GetSpread() *Spread {
	if x, ok := x.GetContent().(*PacketContent_Spread); ok {
		return x.Spread
	}
	return nil
}

func (x *PacketContent) GetSpreadKnock() *SpreadKnock {
	if x, ok := x.GetContent().(*PacketContent_SpreadKnock); ok {
		return x.SpreadKnock
	}
	return nil
}

func (x *PacketContent) GetSpreadRelay() *SpreadRelay {
	if x, ok := x.GetContent().(*PacketContent_SpreadRelay); ok {
		return x.SpreadRelay
	}
	return nil
}

func (x *PacketContent) GetSpreadResponse() *SpreadResponse {
	if x, ok := x.GetContent().(*PacketContent_SpreadResponse); ok {
		return x.SpreadResponse
	}
	return nil
}

type isPacketContent_Content interface {
	isPacketContent_Content()
}

type PacketContent_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type PacketContent_SignalingIce struct {
	SignalingIce *SignalingICE `protobuf:"bytes,5,opt,name=signaling_ice,json=signalingIce,proto3,oneof"`
}

type PacketContent_SignalingOffer struct {
	SignalingOffer *SignalingOffer `protobuf:"bytes,6,opt,name=signaling_offer,json=signalingOffer,proto3,oneof"`
}

type PacketContent_SignalingOfferSuccess struct {
	SignalingOfferSuccess *SignalingOfferSuccess `protobuf:"bytes,7,opt,name=signaling_offer_success,json=signalingOfferSuccess,proto3,oneof"`
}

type PacketContent_SignalingOfferFailure struct {
	SignalingOfferFailure *SignalingOfferFailure `protobuf:"bytes,8,opt,name=signaling_offer_failure,json=signalingOfferFailure,proto3,oneof"`
}

type PacketContent_Routing struct {
	Routing *Routing `protobuf:"bytes,10,opt,name=routing,proto3,oneof"`
}

type PacketContent_Messaging struct {
	Messaging *Messaging `protobuf:"bytes,20,opt,name=messaging,proto3,oneof"`
}

type PacketContent_MessagingResponse struct {
	MessagingResponse *MessagingResponse `protobuf:"bytes,21,opt,name=messaging_response,json=messagingResponse,proto3,oneof"`
}

type PacketContent_KvsAccept struct {
	KvsAccept *KvsAccept `protobuf:"bytes,30,opt,name=kvs_accept,json=kvsAccept,proto3,oneof"`
}

type PacketContent_KvsAcceptResponse struct {
	KvsAcceptResponse *KvsAcceptResponse `protobuf:"bytes,31,opt,name=kvs_accept_response,json=kvsAcceptResponse,proto3,oneof"`
}

type PacketContent_KvsBalanceAcceptor struct {
	KvsBalanceAcceptor *KvsBalanceAcceptor `protobuf:"bytes,32,opt,name=kvs_balance_acceptor,json=kvsBalanceAcceptor,proto3,oneof"`
}

type PacketContent_KvsBalanceProposer struct {
	KvsBalanceProposer *KvsBalanceProposer `protobuf:"bytes,33,opt,name=kvs_balance_proposer,json=kvsBalanceProposer,proto3,oneof"`
}

type PacketContent_KvsGet struct {
	KvsGet *KvsGet `protobuf:"bytes,34,opt,name=kvs_get,json=kvsGet,proto3,oneof"`
}

type PacketContent_KvsGetResponse struct {
	KvsGetResponse *KvsGetResponse `protobuf:"bytes,35,opt,name=kvs_get_response,json=kvsGetResponse,proto3,oneof"`
}

type PacketContent_KvsHint struct {
	KvsHint *KvsHint `protobuf:"bytes,36,opt,name=kvs_hint,json=kvsHint,proto3,oneof"`
}

type PacketContent_KvsPrepare struct {
	KvsPrepare *KvsPrepare `protobuf:"bytes,37,opt,name=kvs_prepare,json=kvsPrepare,proto3,oneof"`
}

type PacketContent_KvsPrepareResponse struct {
	KvsPrepareResponse *KvsPrepareResponse `protobuf:"bytes,38,opt,name=kvs_prepare_response,json=kvsPrepareResponse,proto3,oneof"`
}

type PacketContent_KvsSet struct {
	KvsSet *KvsSet `protobuf:"bytes,39,opt,name=kvs_set,json=kvsSet,proto3,oneof"`
}

type PacketContent_KvsSetResponse struct {
	KvsSetResponse *KvsSetResponse `protobuf:"bytes,40,opt,name=kvs_set_response,json=kvsSetResponse,proto3,oneof"`
}

type PacketContent_Spread struct {
	Spread *Spread `protobuf:"bytes,50,opt,name=spread,proto3,oneof"`
}

type PacketContent_SpreadKnock struct {
	SpreadKnock *SpreadKnock `protobuf:"bytes,51,opt,name=spread_knock,json=spreadKnock,proto3,oneof"`
}

type PacketContent_SpreadRelay struct {
	SpreadRelay *SpreadRelay `protobuf:"bytes,52,opt,name=spread_relay,json=spreadRelay,proto3,oneof"`
}

type PacketContent_SpreadResponse struct {
	SpreadResponse *SpreadResponse `protobuf:"bytes,53,opt,name=spread_response,json=spreadResponse,proto3,oneof"`
}

func (*PacketContent_Error) isPacketContent_Content() {}

func (*PacketContent_SignalingIce) isPacketContent_Content() {}

func (*PacketContent_SignalingOffer) isPacketContent_Content() {}

func (*PacketContent_SignalingOfferSuccess) isPacketContent_Content() {}

func (*PacketContent_SignalingOfferFailure) isPacketContent_Content() {}

func (*PacketContent_Routing) isPacketContent_Content() {}

func (*PacketContent_Messaging) isPacketContent_Content() {}

func (*PacketContent_MessagingResponse) isPacketContent_Content() {}

func (*PacketContent_KvsAccept) isPacketContent_Content() {}

func (*PacketContent_KvsAcceptResponse) isPacketContent_Content() {}

func (*PacketContent_KvsBalanceAcceptor) isPacketContent_Content() {}

func (*PacketContent_KvsBalanceProposer) isPacketContent_Content() {}

func (*PacketContent_KvsGet) isPacketContent_Content() {}

func (*PacketContent_KvsGetResponse) isPacketContent_Content() {}

func (*PacketContent_KvsHint) isPacketContent_Content() {}

func (*PacketContent_KvsPrepare) isPacketContent_Content() {}

func (*PacketContent_KvsPrepareResponse) isPacketContent_Content() {}

func (*PacketContent_KvsSet) isPacketContent_Content() {}

func (*PacketContent_KvsSetResponse) isPacketContent_Content() {}

func (*PacketContent_Spread) isPacketContent_Content() {}

func (*PacketContent_SpreadKnock) isPacketContent_Content() {}

func (*PacketContent_SpreadRelay) isPacketContent_Content() {}

func (*PacketContent_SpreadResponse) isPacketContent_Content() {}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{9}
}

func (x *Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// for node-seed authenticate and hints
type SeedAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Nid     *NodeID `protobuf:"bytes,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Hint    uint32  `protobuf:"varint,3,opt,name=hint,proto3" json:"hint,omitempty"`
	Token   string  `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SeedAuth) Reset() {
	*x = SeedAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedAuth) ProtoMessage() {}

func (x *SeedAuth) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedAuth.ProtoReflect.Descriptor instead.
func (*SeedAuth) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{10}
}

func (x *SeedAuth) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SeedAuth) GetNid() *NodeID {
	if x != nil {
		return x.Nid
	}
	return nil
}

func (x *SeedAuth) GetHint() uint32 {
	if x != nil {
		return x.Hint
	}
	return 0
}

func (x *SeedAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SeedAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Config  string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SeedAuthResponse) Reset() {
	*x = SeedAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedAuthResponse) ProtoMessage() {}

func (x *SeedAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedAuthResponse.ProtoReflect.Descriptor instead.
func (*SeedAuthResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{11}
}

func (x *SeedAuthResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SeedAuthResponse) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type SeedHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hint uint32 `protobuf:"varint,1,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *SeedHint) Reset() {
	*x = SeedHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedHint) ProtoMessage() {}

func (x *SeedHint) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedHint.ProtoReflect.Descriptor instead.
func (*SeedHint) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{12}
}

func (x *SeedHint) GetHint() uint32 {
	if x != nil {
		return x.Hint
	}
	return 0
}

// for webrtc signaling
type SignalingICE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalNid  *NodeID `protobuf:"bytes,1,opt,name=local_nid,json=localNid,proto3" json:"local_nid,omitempty"`
	RemoteNid *NodeID `protobuf:"bytes,2,opt,name=remote_nid,json=remoteNid,proto3" json:"remote_nid,omitempty"`
	Ice       string  `protobuf:"bytes,3,opt,name=ice,proto3" json:"ice,omitempty"`
}

func (x *SignalingICE) Reset() {
	*x = SignalingICE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalingICE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalingICE) ProtoMessage() {}

func (x *SignalingICE) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalingICE.ProtoReflect.Descriptor instead.
func (*SignalingICE) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{13}
}

func (x *SignalingICE) GetLocalNid() *NodeID {
	if x != nil {
		return x.LocalNid
	}
	return nil
}

func (x *SignalingICE) GetRemoteNid() *NodeID {
	if x != nil {
		return x.RemoteNid
	}
	return nil
}

func (x *SignalingICE) GetIce() string {
	if x != nil {
		return x.Ice
	}
	return ""
}

type SignalingOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimeNid  *NodeID `protobuf:"bytes,1,opt,name=prime_nid,json=primeNid,proto3" json:"prime_nid,omitempty"`
	SecondNid *NodeID `protobuf:"bytes,2,opt,name=second_nid,json=secondNid,proto3" json:"second_nid,omitempty"`
	Sdp       string  `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
	Type      uint32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SignalingOffer) Reset() {
	*x = SignalingOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalingOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalingOffer) ProtoMessage() {}

func (x *SignalingOffer) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalingOffer.ProtoReflect.Descriptor instead.
func (*SignalingOffer) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{14}
}

func (x *SignalingOffer) GetPrimeNid() *NodeID {
	if x != nil {
		return x.PrimeNid
	}
	return nil
}

func (x *SignalingOffer) GetSecondNid() *NodeID {
	if x != nil {
		return x.SecondNid
	}
	return nil
}

func (x *SignalingOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *SignalingOffer) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type SignalingOfferSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    uint32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	SecondNid *NodeID `protobuf:"bytes,2,opt,name=second_nid,json=secondNid,proto3" json:"second_nid,omitempty"`
	Sdp       string  `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *SignalingOfferSuccess) Reset() {
	*x = SignalingOfferSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalingOfferSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalingOfferSuccess) ProtoMessage() {}

func (x *SignalingOfferSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalingOfferSuccess.ProtoReflect.Descriptor instead.
func (*SignalingOfferSuccess) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{15}
}

func (x *SignalingOfferSuccess) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SignalingOfferSuccess) GetSecondNid() *NodeID {
	if x != nil {
		return x.SecondNid
	}
	return nil
}

func (x *SignalingOfferSuccess) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type SignalingOfferFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   uint32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	PrimeNid *NodeID `protobuf:"bytes,2,opt,name=prime_nid,json=primeNid,proto3" json:"prime_nid,omitempty"`
}

func (x *SignalingOfferFailure) Reset() {
	*x = SignalingOfferFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalingOfferFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalingOfferFailure) ProtoMessage() {}

func (x *SignalingOfferFailure) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalingOfferFailure.ProtoReflect.Descriptor instead.
func (*SignalingOfferFailure) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{16}
}

func (x *SignalingOfferFailure) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SignalingOfferFailure) GetPrimeNid() *NodeID {
	if x != nil {
		return x.PrimeNid
	}
	return nil
}

// for routing
type RoutingSeedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid      *NodeID `protobuf:"bytes,1,opt,name=nid,proto3" json:"nid,omitempty"`
	Duration int64   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RoutingSeedRecord) Reset() {
	*x = RoutingSeedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingSeedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingSeedRecord) ProtoMessage() {}

func (x *RoutingSeedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingSeedRecord.ProtoReflect.Descriptor instead.
func (*RoutingSeedRecord) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{17}
}

func (x *RoutingSeedRecord) GetNid() *NodeID {
	if x != nil {
		return x.Nid
	}
	return nil
}

func (x *RoutingSeedRecord) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type RoutingNodeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R1DScore    int64       `protobuf:"varint,1,opt,name=r1d_score,json=r1dScore,proto3" json:"r1d_score,omitempty"`
	R2DPosition *Coordinate `protobuf:"bytes,2,opt,name=r2d_position,json=r2dPosition,proto3" json:"r2d_position,omitempty"`
}

func (x *RoutingNodeRecord) Reset() {
	*x = RoutingNodeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingNodeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingNodeRecord) ProtoMessage() {}

func (x *RoutingNodeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingNodeRecord.ProtoReflect.Descriptor instead.
func (*RoutingNodeRecord) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{18}
}

func (x *RoutingNodeRecord) GetR1DScore() int64 {
	if x != nil {
		return x.R1DScore
	}
	return 0
}

func (x *RoutingNodeRecord) GetR2DPosition() *Coordinate {
	if x != nil {
		return x.R2DPosition
	}
	return nil
}

type Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedDistance uint32               `protobuf:"varint,1,opt,name=seed_distance,json=seedDistance,proto3" json:"seed_distance,omitempty"`
	SeedRecords  []*RoutingSeedRecord `protobuf:"bytes,2,rep,name=seed_records,json=seedRecords,proto3" json:"seed_records,omitempty"`
	R2DPosition  *Coordinate          `protobuf:"bytes,3,opt,name=r2d_position,json=r2dPosition,proto3" json:"r2d_position,omitempty"`
	// Key type of map is string from node-id.
	NodeRecords map[string]*RoutingNodeRecord `protobuf:"bytes,4,rep,name=node_records,json=nodeRecords,proto3" json:"node_records,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Routing) Reset() {
	*x = Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{19}
}

func (x *Routing) GetSeedDistance() uint32 {
	if x != nil {
		return x.SeedDistance
	}
	return 0
}

func (x *Routing) GetSeedRecords() []*RoutingSeedRecord {
	if x != nil {
		return x.SeedRecords
	}
	return nil
}

func (x *Routing) GetR2DPosition() *Coordinate {
	if x != nil {
		return x.R2DPosition
	}
	return nil
}

func (x *Routing) GetNodeRecords() map[string]*RoutingNodeRecord {
	if x != nil {
		return x.NodeRecords
	}
	return nil
}

// for messaging module
type Messaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt     uint32 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message *Value `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Messaging) Reset() {
	*x = Messaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Messaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messaging) ProtoMessage() {}

func (x *Messaging) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messaging.ProtoReflect.Descriptor instead.
func (*Messaging) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{20}
}

func (x *Messaging) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *Messaging) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Messaging) GetMessage() *Value {
	if x != nil {
		return x.Message
	}
	return nil
}

type MessagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Value `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MessagingResponse) Reset() {
	*x = MessagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingResponse) ProtoMessage() {}

func (x *MessagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingResponse.ProtoReflect.Descriptor instead.
func (*MessagingResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{21}
}

func (x *MessagingResponse) GetResponse() *Value {
	if x != nil {
		return x.Response
	}
	return nil
}

// for kvs module
type KvsAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt       uint32 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	N         uint32 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	I         uint32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	MemberIdx uint32 `protobuf:"varint,4,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key       string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value     *Value `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvsAccept) Reset() {
	*x = KvsAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsAccept) ProtoMessage() {}

func (x *KvsAccept) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsAccept.ProtoReflect.Descriptor instead.
func (*KvsAccept) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{22}
}

func (x *KvsAccept) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *KvsAccept) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsAccept) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *KvsAccept) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsAccept) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsAccept) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsAcceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	N       uint32 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	I       uint32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
}

func (x *KvsAcceptResponse) Reset() {
	*x = KvsAcceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsAcceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsAcceptResponse) ProtoMessage() {}

func (x *KvsAcceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsAcceptResponse.ProtoReflect.Descriptor instead.
func (*KvsAcceptResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{23}
}

func (x *KvsAcceptResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsAcceptResponse) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsAcceptResponse) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

type KvsBalanceAcceptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Na        uint32 `protobuf:"varint,1,opt,name=na,proto3" json:"na,omitempty"`
	Np        uint32 `protobuf:"varint,2,opt,name=np,proto3" json:"np,omitempty"`
	Ia        uint32 `protobuf:"varint,3,opt,name=ia,proto3" json:"ia,omitempty"`
	MemberIdx uint32 `protobuf:"varint,4,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key       string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value     *Value `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvsBalanceAcceptor) Reset() {
	*x = KvsBalanceAcceptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsBalanceAcceptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsBalanceAcceptor) ProtoMessage() {}

func (x *KvsBalanceAcceptor) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsBalanceAcceptor.ProtoReflect.Descriptor instead.
func (*KvsBalanceAcceptor) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{24}
}

func (x *KvsBalanceAcceptor) GetNa() uint32 {
	if x != nil {
		return x.Na
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetNp() uint32 {
	if x != nil {
		return x.Np
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetIa() uint32 {
	if x != nil {
		return x.Ia
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsBalanceAcceptor) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsBalanceProposer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Np    uint32 `protobuf:"varint,1,opt,name=np,proto3" json:"np,omitempty"`
	Ip    uint32 `protobuf:"varint,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Key   string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvsBalanceProposer) Reset() {
	*x = KvsBalanceProposer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsBalanceProposer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsBalanceProposer) ProtoMessage() {}

func (x *KvsBalanceProposer) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsBalanceProposer.ProtoReflect.Descriptor instead.
func (*KvsBalanceProposer) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{25}
}

func (x *KvsBalanceProposer) GetNp() uint32 {
	if x != nil {
		return x.Np
	}
	return 0
}

func (x *KvsBalanceProposer) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *KvsBalanceProposer) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsBalanceProposer) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberIdx uint32 `protobuf:"varint,1,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KvsGet) Reset() {
	*x = KvsGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsGet) ProtoMessage() {}

func (x *KvsGet) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsGet.ProtoReflect.Descriptor instead.
func (*KvsGet) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{26}
}

func (x *KvsGet) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsGet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type KvsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The values below are used only success response.
	N     uint32 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	I     uint32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	Value *Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvsGetResponse) Reset() {
	*x = KvsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsGetResponse) ProtoMessage() {}

func (x *KvsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsGetResponse.ProtoReflect.Descriptor instead.
func (*KvsGetResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{27}
}

func (x *KvsGetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsGetResponse) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsGetResponse) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *KvsGetResponse) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N     uint32 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	I     uint32 `protobuf:"varint,2,opt,name=i,proto3" json:"i,omitempty"`
	Key   string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvsHint) Reset() {
	*x = KvsHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsHint) ProtoMessage() {}

func (x *KvsHint) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsHint.ProtoReflect.Descriptor instead.
func (*KvsHint) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{28}
}

func (x *KvsHint) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsHint) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *KvsHint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsHint) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt       uint32 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	N         uint32 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	MemberIdx uint32 `protobuf:"varint,3,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key       string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KvsPrepare) Reset() {
	*x = KvsPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsPrepare) ProtoMessage() {}

func (x *KvsPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsPrepare.ProtoReflect.Descriptor instead.
func (*KvsPrepare) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{29}
}

func (x *KvsPrepare) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *KvsPrepare) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsPrepare) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsPrepare) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type KvsPrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	N       uint32 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	// `i` is set only success response.
	I uint32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
}

func (x *KvsPrepareResponse) Reset() {
	*x = KvsPrepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsPrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsPrepareResponse) ProtoMessage() {}

func (x *KvsPrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsPrepareResponse.ProtoReflect.Descriptor instead.
func (*KvsPrepareResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{30}
}

func (x *KvsPrepareResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsPrepareResponse) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsPrepareResponse) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

type KvsSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt   uint32 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvsSet) Reset() {
	*x = KvsSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsSet) ProtoMessage() {}

func (x *KvsSet) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsSet.ProtoReflect.Descriptor instead.
func (*KvsSet) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{31}
}

func (x *KvsSet) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *KvsSet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsSet) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	//  `reason` are set when failed response.
	Reason uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *KvsSetResponse) Reset() {
	*x = KvsSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvsSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsSetResponse) ProtoMessage() {}

func (x *KvsSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsSetResponse.ProtoReflect.Descriptor instead.
func (*KvsSetResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{32}
}

func (x *KvsSetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsSetResponse) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

// for spread module
type Spread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *NodeID     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Center  *Coordinate `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	R       float64     `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty"`
	Uid     uint64      `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name    string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Message *Value      `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Opt     uint32      `protobuf:"varint,7,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *Spread) Reset() {
	*x = Spread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spread) ProtoMessage() {}

func (x *Spread) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spread.ProtoReflect.Descriptor instead.
func (*Spread) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{33}
}

func (x *Spread) GetSource() *NodeID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Spread) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Spread) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Spread) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Spread) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spread) GetMessage() *Value {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Spread) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type SpreadKnock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center *Coordinate `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	R      float64     `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	Uid    uint64      `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *SpreadKnock) Reset() {
	*x = SpreadKnock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpreadKnock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadKnock) ProtoMessage() {}

func (x *SpreadKnock) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadKnock.ProtoReflect.Descriptor instead.
func (*SpreadKnock) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{34}
}

func (x *SpreadKnock) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SpreadKnock) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *SpreadKnock) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type SpreadRelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *NodeID     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Center  *Coordinate `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	R       float64     `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty"`
	Uid     uint64      `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name    string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Message *Value      `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Opt     uint32      `protobuf:"varint,7,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *SpreadRelay) Reset() {
	*x = SpreadRelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpreadRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadRelay) ProtoMessage() {}

func (x *SpreadRelay) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadRelay.ProtoReflect.Descriptor instead.
func (*SpreadRelay) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{35}
}

func (x *SpreadRelay) GetSource() *NodeID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SpreadRelay) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SpreadRelay) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *SpreadRelay) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SpreadRelay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpreadRelay) GetMessage() *Value {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SpreadRelay) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type SpreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	//  `code` and `message` are set when failed response.
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SpreadResponse) Reset() {
	*x = SpreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_colonio_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadResponse) ProtoMessage() {}

func (x *SpreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_colonio_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadResponse.ProtoReflect.Descriptor instead.
func (*SpreadResponse) Descriptor() ([]byte, []int) {
	return file_colonio_proto_rawDescGZIP(), []int{36}
}

func (x *SpreadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SpreadResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SpreadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_colonio_proto protoreflect.FileDescriptor

var file_colonio_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28,
	0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x40, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x31, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x12, 0x15, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x74, 0x56, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x12, 0x1b,
	0x0a, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x73, 0x74,
	0x5f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x06, 0x64, 0x73, 0x74, 0x4e, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x72, 0x63,
	0x5f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x0a, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x0a,
	0x53, 0x65, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x43, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xea, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x64, 0x73, 0x74, 0x4e, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4e, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd5, 0x0c, 0x0a, 0x0d, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x43, 0x45, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x63, 0x65, 0x12, 0x48,
	0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6b, 0x76, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x76, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x6b, 0x76, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x6b, 0x76, 0x73, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x12, 0x6b, 0x76, 0x73,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x55, 0x0a, 0x14, 0x6b, 0x76, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x12, 0x6b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x6b, 0x76, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x6b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x6b, 0x76, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6b, 0x76, 0x73, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x6b, 0x76, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6b, 0x76, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76,
	0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x76, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x6b, 0x76, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6b, 0x76, 0x73, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x6b, 0x76, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b,
	0x76, 0x73, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x49, 0x0a, 0x10, 0x6b, 0x76, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x76, 0x73, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x76, 0x73, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x08, 0x53, 0x65, 0x65,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x44, 0x0a, 0x10, 0x53, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1e, 0x0a, 0x08, 0x53, 0x65, 0x65, 0x64,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x43, 0x45, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4e, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x4e, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64,
	0x70, 0x22, 0x63, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x4e, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x03, 0x6e,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52,
	0x03, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6e, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x31, 0x64, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x31, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x32, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x32, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xdf, 0x02, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x32, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x32, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x60, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x61, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x09, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69,
	0x22, 0xa1, 0x01, 0x0a, 0x12, 0x4b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x72, 0x0a, 0x12, 0x4b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x06, 0x4b, 0x76, 0x73, 0x47,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x0e, 0x4b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x07, 0x4b, 0x76, 0x73, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e,
	0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x0a,
	0x4b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4a, 0x0a, 0x12, 0x4b,
	0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69, 0x22, 0x58, 0x0a, 0x06, 0x4b, 0x76, 0x73, 0x53, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6f, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x42, 0x0a, 0x0e, 0x4b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x60, 0x0a, 0x0b, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f,
	0x70, 0x74, 0x22, 0x58, 0x0a, 0x0e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x64, 0x61, 0x2d, 0x6a, 0x70, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_colonio_proto_rawDescOnce sync.Once
	file_colonio_proto_rawDescData = file_colonio_proto_rawDesc
)

func file_colonio_proto_rawDescGZIP() []byte {
	file_colonio_proto_rawDescOnce.Do(func() {
		file_colonio_proto_rawDescData = protoimpl.X.CompressGZIP(file_colonio_proto_rawDescData)
	})
	return file_colonio_proto_rawDescData
}

var file_colonio_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_colonio_proto_goTypes = []interface{}{
	(*Coordinate)(nil),            // 0: colonio.proto.Coordinate
	(*NodeID)(nil),                // 1: colonio.proto.NodeID
	(*Value)(nil),                 // 2: colonio.proto.Value
	(*NodePackets)(nil),           // 3: colonio.proto.NodePackets
	(*NodePacketHead)(nil),        // 4: colonio.proto.NodePacketHead
	(*NodePacket)(nil),            // 5: colonio.proto.NodePacket
	(*SeedPacket)(nil),            // 6: colonio.proto.SeedPacket
	(*SeedRelayPacket)(nil),       // 7: colonio.proto.SeedRelayPacket
	(*PacketContent)(nil),         // 8: colonio.proto.PacketContent
	(*Error)(nil),                 // 9: colonio.proto.Error
	(*SeedAuth)(nil),              // 10: colonio.proto.SeedAuth
	(*SeedAuthResponse)(nil),      // 11: colonio.proto.SeedAuthResponse
	(*SeedHint)(nil),              // 12: colonio.proto.SeedHint
	(*SignalingICE)(nil),          // 13: colonio.proto.SignalingICE
	(*SignalingOffer)(nil),        // 14: colonio.proto.SignalingOffer
	(*SignalingOfferSuccess)(nil), // 15: colonio.proto.SignalingOfferSuccess
	(*SignalingOfferFailure)(nil), // 16: colonio.proto.SignalingOfferFailure
	(*RoutingSeedRecord)(nil),     // 17: colonio.proto.RoutingSeedRecord
	(*RoutingNodeRecord)(nil),     // 18: colonio.proto.RoutingNodeRecord
	(*Routing)(nil),               // 19: colonio.proto.Routing
	(*Messaging)(nil),             // 20: colonio.proto.Messaging
	(*MessagingResponse)(nil),     // 21: colonio.proto.MessagingResponse
	(*KvsAccept)(nil),             // 22: colonio.proto.KvsAccept
	(*KvsAcceptResponse)(nil),     // 23: colonio.proto.KvsAcceptResponse
	(*KvsBalanceAcceptor)(nil),    // 24: colonio.proto.KvsBalanceAcceptor
	(*KvsBalanceProposer)(nil),    // 25: colonio.proto.KvsBalanceProposer
	(*KvsGet)(nil),                // 26: colonio.proto.KvsGet
	(*KvsGetResponse)(nil),        // 27: colonio.proto.KvsGetResponse
	(*KvsHint)(nil),               // 28: colonio.proto.KvsHint
	(*KvsPrepare)(nil),            // 29: colonio.proto.KvsPrepare
	(*KvsPrepareResponse)(nil),    // 30: colonio.proto.KvsPrepareResponse
	(*KvsSet)(nil),                // 31: colonio.proto.KvsSet
	(*KvsSetResponse)(nil),        // 32: colonio.proto.KvsSetResponse
	(*Spread)(nil),                // 33: colonio.proto.Spread
	(*SpreadKnock)(nil),           // 34: colonio.proto.SpreadKnock
	(*SpreadRelay)(nil),           // 35: colonio.proto.SpreadRelay
	(*SpreadResponse)(nil),        // 36: colonio.proto.SpreadResponse
	nil,                           // 37: colonio.proto.Routing.NodeRecordsEntry
}
var file_colonio_proto_depIdxs = []int32{
	5,  // 0: colonio.proto.NodePackets.packet:type_name -> colonio.proto.NodePacket
	1,  // 1: colonio.proto.NodePacketHead.dst_nid:type_name -> colonio.proto.NodeID
	1,  // 2: colonio.proto.NodePacketHead.src_nid:type_name -> colonio.proto.NodeID
	4,  // 3: colonio.proto.NodePacket.head:type_name -> colonio.proto.NodePacketHead
	9,  // 4: colonio.proto.SeedPacket.error:type_name -> colonio.proto.Error
	10, // 5: colonio.proto.SeedPacket.auth:type_name -> colonio.proto.SeedAuth
	11, // 6: colonio.proto.SeedPacket.auth_response:type_name -> colonio.proto.SeedAuthResponse
	12, // 7: colonio.proto.SeedPacket.hint:type_name -> colonio.proto.SeedHint
	7,  // 8: colonio.proto.SeedPacket.relay_packet:type_name -> colonio.proto.SeedRelayPacket
	1,  // 9: colonio.proto.SeedRelayPacket.dst_nid:type_name -> colonio.proto.NodeID
	1,  // 10: colonio.proto.SeedRelayPacket.src_nid:type_name -> colonio.proto.NodeID
	8,  // 11: colonio.proto.SeedRelayPacket.content:type_name -> colonio.proto.PacketContent
	9,  // 12: colonio.proto.PacketContent.error:type_name -> colonio.proto.Error
	13, // 13: colonio.proto.PacketContent.signaling_ice:type_name -> colonio.proto.SignalingICE
	14, // 14: colonio.proto.PacketContent.signaling_offer:type_name -> colonio.proto.SignalingOffer
	15, // 15: colonio.proto.PacketContent.signaling_offer_success:type_name -> colonio.proto.SignalingOfferSuccess
	16, // 16: colonio.proto.PacketContent.signaling_offer_failure:type_name -> colonio.proto.SignalingOfferFailure
	19, // 17: colonio.proto.PacketContent.routing:type_name -> colonio.proto.Routing
	20, // 18: colonio.proto.PacketContent.messaging:type_name -> colonio.proto.Messaging
	21, // 19: colonio.proto.PacketContent.messaging_response:type_name -> colonio.proto.MessagingResponse
	22, // 20: colonio.proto.PacketContent.kvs_accept:type_name -> colonio.proto.KvsAccept
	23, // 21: colonio.proto.PacketContent.kvs_accept_response:type_name -> colonio.proto.KvsAcceptResponse
	24, // 22: colonio.proto.PacketContent.kvs_balance_acceptor:type_name -> colonio.proto.KvsBalanceAcceptor
	25, // 23: colonio.proto.PacketContent.kvs_balance_proposer:type_name -> colonio.proto.KvsBalanceProposer
	26, // 24: colonio.proto.PacketContent.kvs_get:type_name -> colonio.proto.KvsGet
	27, // 25: colonio.proto.PacketContent.kvs_get_response:type_name -> colonio.proto.KvsGetResponse
	28, // 26: colonio.proto.PacketContent.kvs_hint:type_name -> colonio.proto.KvsHint
	29, // 27: colonio.proto.PacketContent.kvs_prepare:type_name -> colonio.proto.KvsPrepare
	30, // 28: colonio.proto.PacketContent.kvs_prepare_response:type_name -> colonio.proto.KvsPrepareResponse
	31, // 29: colonio.proto.PacketContent.kvs_set:type_name -> colonio.proto.KvsSet
	32, // 30: colonio.proto.PacketContent.kvs_set_response:type_name -> colonio.proto.KvsSetResponse
	33, // 31: colonio.proto.PacketContent.spread:type_name -> colonio.proto.Spread
	34, // 32: colonio.proto.PacketContent.spread_knock:type_name -> colonio.proto.SpreadKnock
	35, // 33: colonio.proto.PacketContent.spread_relay:type_name -> colonio.proto.SpreadRelay
	36, // 34: colonio.proto.PacketContent.spread_response:type_name -> colonio.proto.SpreadResponse
	1,  // 35: colonio.proto.SeedAuth.nid:type_name -> colonio.proto.NodeID
	1,  // 36: colonio.proto.SignalingICE.local_nid:type_name -> colonio.proto.NodeID
	1,  // 37: colonio.proto.SignalingICE.remote_nid:type_name -> colonio.proto.NodeID
	1,  // 38: colonio.proto.SignalingOffer.prime_nid:type_name -> colonio.proto.NodeID
	1,  // 39: colonio.proto.SignalingOffer.second_nid:type_name -> colonio.proto.NodeID
	1,  // 40: colonio.proto.SignalingOfferSuccess.second_nid:type_name -> colonio.proto.NodeID
	1,  // 41: colonio.proto.SignalingOfferFailure.prime_nid:type_name -> colonio.proto.NodeID
	1,  // 42: colonio.proto.RoutingSeedRecord.nid:type_name -> colonio.proto.NodeID
	0,  // 43: colonio.proto.RoutingNodeRecord.r2d_position:type_name -> colonio.proto.Coordinate
	17, // 44: colonio.proto.Routing.seed_records:type_name -> colonio.proto.RoutingSeedRecord
	0,  // 45: colonio.proto.Routing.r2d_position:type_name -> colonio.proto.Coordinate
	37, // 46: colonio.proto.Routing.node_records:type_name -> colonio.proto.Routing.NodeRecordsEntry
	2,  // 47: colonio.proto.Messaging.message:type_name -> colonio.proto.Value
	2,  // 48: colonio.proto.MessagingResponse.response:type_name -> colonio.proto.Value
	2,  // 49: colonio.proto.KvsAccept.value:type_name -> colonio.proto.Value
	2,  // 50: colonio.proto.KvsBalanceAcceptor.value:type_name -> colonio.proto.Value
	2,  // 51: colonio.proto.KvsBalanceProposer.value:type_name -> colonio.proto.Value
	2,  // 52: colonio.proto.KvsGetResponse.value:type_name -> colonio.proto.Value
	2,  // 53: colonio.proto.KvsHint.value:type_name -> colonio.proto.Value
	2,  // 54: colonio.proto.KvsSet.value:type_name -> colonio.proto.Value
	1,  // 55: colonio.proto.Spread.source:type_name -> colonio.proto.NodeID
	0,  // 56: colonio.proto.Spread.center:type_name -> colonio.proto.Coordinate
	2,  // 57: colonio.proto.Spread.message:type_name -> colonio.proto.Value
	0,  // 58: colonio.proto.SpreadKnock.center:type_name -> colonio.proto.Coordinate
	1,  // 59: colonio.proto.SpreadRelay.source:type_name -> colonio.proto.NodeID
	0,  // 60: colonio.proto.SpreadRelay.center:type_name -> colonio.proto.Coordinate
	2,  // 61: colonio.proto.SpreadRelay.message:type_name -> colonio.proto.Value
	18, // 62: colonio.proto.Routing.NodeRecordsEntry.value:type_name -> colonio.proto.RoutingNodeRecord
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_colonio_proto_init() }
func file_colonio_proto_init() {
	if File_colonio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_colonio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePackets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePacketHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedRelayPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalingICE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalingOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalingOfferSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalingOfferFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingSeedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingNodeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Messaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsAcceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsBalanceAcceptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsBalanceProposer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsPrepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvsSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpreadKnock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpreadRelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_colonio_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_colonio_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_BoolV)(nil),
		(*Value_IntV)(nil),
		(*Value_DoubleV)(nil),
		(*Value_StringV)(nil),
		(*Value_BinaryV)(nil),
	}
	file_colonio_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SeedPacket_Error)(nil),
		(*SeedPacket_Auth)(nil),
		(*SeedPacket_AuthResponse)(nil),
		(*SeedPacket_Ping)(nil),
		(*SeedPacket_Hint)(nil),
		(*SeedPacket_RequireRandom)(nil),
		(*SeedPacket_RelayPacket)(nil),
	}
	file_colonio_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PacketContent_Error)(nil),
		(*PacketContent_SignalingIce)(nil),
		(*PacketContent_SignalingOffer)(nil),
		(*PacketContent_SignalingOfferSuccess)(nil),
		(*PacketContent_SignalingOfferFailure)(nil),
		(*PacketContent_Routing)(nil),
		(*PacketContent_Messaging)(nil),
		(*PacketContent_MessagingResponse)(nil),
		(*PacketContent_KvsAccept)(nil),
		(*PacketContent_KvsAcceptResponse)(nil),
		(*PacketContent_KvsBalanceAcceptor)(nil),
		(*PacketContent_KvsBalanceProposer)(nil),
		(*PacketContent_KvsGet)(nil),
		(*PacketContent_KvsGetResponse)(nil),
		(*PacketContent_KvsHint)(nil),
		(*PacketContent_KvsPrepare)(nil),
		(*PacketContent_KvsPrepareResponse)(nil),
		(*PacketContent_KvsSet)(nil),
		(*PacketContent_KvsSetResponse)(nil),
		(*PacketContent_Spread)(nil),
		(*PacketContent_SpreadKnock)(nil),
		(*PacketContent_SpreadRelay)(nil),
		(*PacketContent_SpreadResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_colonio_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_colonio_proto_goTypes,
		DependencyIndexes: file_colonio_proto_depIdxs,
		MessageInfos:      file_colonio_proto_msgTypes,
	}.Build()
	File_colonio_proto = out.File
	file_colonio_proto_rawDesc = nil
	file_colonio_proto_goTypes = nil
	file_colonio_proto_depIdxs = nil
}
