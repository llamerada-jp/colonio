// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/colonio/v1alpha/colonio.proto

package v1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// basic types
type Coordinate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinate) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinate) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type NodeID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id0           uint64                 `protobuf:"varint,1,opt,name=id0,proto3" json:"id0,omitempty"`
	Id1           uint64                 `protobuf:"varint,2,opt,name=id1,proto3" json:"id1,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeID) Reset() {
	*x = NodeID{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeID) ProtoMessage() {}

func (x *NodeID) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeID.ProtoReflect.Descriptor instead.
func (*NodeID) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{1}
}

func (x *NodeID) GetId0() uint64 {
	if x != nil {
		return x.Id0
	}
	return 0
}

func (x *NodeID) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

// node-node packet container
// Or use an empty message as a ping to cancel the timeout.
type NodePackets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packets       []*NodePacket          `protobuf:"bytes,1,rep,name=packets,proto3" json:"packets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePackets) Reset() {
	*x = NodePackets{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePackets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePackets) ProtoMessage() {}

func (x *NodePackets) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePackets.ProtoReflect.Descriptor instead.
func (*NodePackets) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{2}
}

func (x *NodePackets) GetPackets() []*NodePacket {
	if x != nil {
		return x.Packets
	}
	return nil
}

type NodePacketHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstNodeId     *NodeID                `protobuf:"bytes,1,opt,name=dst_node_id,json=dstNodeId,proto3" json:"dst_node_id,omitempty"`
	SrcNodeId     *NodeID                `protobuf:"bytes,2,opt,name=src_node_id,json=srcNodeId,proto3" json:"src_node_id,omitempty"`
	HopCount      uint32                 `protobuf:"varint,3,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Mode          uint32                 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePacketHead) Reset() {
	*x = NodePacketHead{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePacketHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePacketHead) ProtoMessage() {}

func (x *NodePacketHead) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePacketHead.ProtoReflect.Descriptor instead.
func (*NodePacketHead) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{3}
}

func (x *NodePacketHead) GetDstNodeId() *NodeID {
	if x != nil {
		return x.DstNodeId
	}
	return nil
}

func (x *NodePacketHead) GetSrcNodeId() *NodeID {
	if x != nil {
		return x.SrcNodeId
	}
	return nil
}

func (x *NodePacketHead) GetHopCount() uint32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *NodePacketHead) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type NodePacket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable head if index is 0.
	Head *NodePacketHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// ID is common to sequence of packets.
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// index decreases by 1 in a sequence of packets.
	Index         uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Content       []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePacket) Reset() {
	*x = NodePacket{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePacket) ProtoMessage() {}

func (x *NodePacket) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePacket.ProtoReflect.Descriptor instead.
func (*NodePacket) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{4}
}

func (x *NodePacket) GetHead() *NodePacketHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *NodePacket) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodePacket) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NodePacket) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type PacketContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*PacketContent_Error
	//	*PacketContent_Routing
	//	*PacketContent_Messaging
	//	*PacketContent_MessagingResponse
	//	*PacketContent_Spread
	//	*PacketContent_SpreadKnock
	//	*PacketContent_SpreadKnockResponse
	//	*PacketContent_SpreadRelay
	//	*PacketContent_SpreadRelayResponse
	Content       isPacketContent_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketContent) Reset() {
	*x = PacketContent{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketContent) ProtoMessage() {}

func (x *PacketContent) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketContent.ProtoReflect.Descriptor instead.
func (*PacketContent) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{5}
}

func (x *PacketContent) GetContent() isPacketContent_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PacketContent) GetError() *Error {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *PacketContent) GetRouting() *Routing {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Routing); ok {
			return x.Routing
		}
	}
	return nil
}

func (x *PacketContent) GetMessaging() *Messaging {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Messaging); ok {
			return x.Messaging
		}
	}
	return nil
}

func (x *PacketContent) GetMessagingResponse() *MessagingResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_MessagingResponse); ok {
			return x.MessagingResponse
		}
	}
	return nil
}

func (x *PacketContent) GetSpread() *Spread {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Spread); ok {
			return x.Spread
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadKnock() *SpreadKnock {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadKnock); ok {
			return x.SpreadKnock
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadKnockResponse() *SpreadKnockResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadKnockResponse); ok {
			return x.SpreadKnockResponse
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadRelay() *SpreadRelay {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadRelay); ok {
			return x.SpreadRelay
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadRelayResponse() *SpreadRelayResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadRelayResponse); ok {
			return x.SpreadRelayResponse
		}
	}
	return nil
}

type isPacketContent_Content interface {
	isPacketContent_Content()
}

type PacketContent_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type PacketContent_Routing struct {
	Routing *Routing `protobuf:"bytes,10,opt,name=routing,proto3,oneof"`
}

type PacketContent_Messaging struct {
	Messaging *Messaging `protobuf:"bytes,20,opt,name=messaging,proto3,oneof"`
}

type PacketContent_MessagingResponse struct {
	MessagingResponse *MessagingResponse `protobuf:"bytes,21,opt,name=messaging_response,json=messagingResponse,proto3,oneof"`
}

type PacketContent_Spread struct {
	Spread *Spread `protobuf:"bytes,50,opt,name=spread,proto3,oneof"`
}

type PacketContent_SpreadKnock struct {
	SpreadKnock *SpreadKnock `protobuf:"bytes,51,opt,name=spread_knock,json=spreadKnock,proto3,oneof"`
}

type PacketContent_SpreadKnockResponse struct {
	SpreadKnockResponse *SpreadKnockResponse `protobuf:"bytes,52,opt,name=spread_knock_response,json=spreadKnockResponse,proto3,oneof"`
}

type PacketContent_SpreadRelay struct {
	SpreadRelay *SpreadRelay `protobuf:"bytes,53,opt,name=spread_relay,json=spreadRelay,proto3,oneof"`
}

type PacketContent_SpreadRelayResponse struct {
	SpreadRelayResponse *SpreadRelayResponse `protobuf:"bytes,54,opt,name=spread_relay_response,json=spreadRelayResponse,proto3,oneof"`
}

func (*PacketContent_Error) isPacketContent_Content() {}

func (*PacketContent_Routing) isPacketContent_Content() {}

func (*PacketContent_Messaging) isPacketContent_Content() {}

func (*PacketContent_MessagingResponse) isPacketContent_Content() {}

func (*PacketContent_Spread) isPacketContent_Content() {}

func (*PacketContent_SpreadKnock) isPacketContent_Content() {}

func (*PacketContent_SpreadKnockResponse) isPacketContent_Content() {}

func (*PacketContent_SpreadRelay) isPacketContent_Content() {}

func (*PacketContent_SpreadRelayResponse) isPacketContent_Content() {}

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// for routing
type RoutingNodeRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	R1DScore      int64                  `protobuf:"varint,1,opt,name=r1d_score,json=r1dScore,proto3" json:"r1d_score,omitempty"`
	R2DPosition   *Coordinate            `protobuf:"bytes,2,opt,name=r2d_position,json=r2dPosition,proto3" json:"r2d_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutingNodeRecord) Reset() {
	*x = RoutingNodeRecord{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutingNodeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingNodeRecord) ProtoMessage() {}

func (x *RoutingNodeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingNodeRecord.ProtoReflect.Descriptor instead.
func (*RoutingNodeRecord) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{7}
}

func (x *RoutingNodeRecord) GetR1DScore() int64 {
	if x != nil {
		return x.R1DScore
	}
	return 0
}

func (x *RoutingNodeRecord) GetR2DPosition() *Coordinate {
	if x != nil {
		return x.R2DPosition
	}
	return nil
}

type Routing struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	R2DPosition *Coordinate            `protobuf:"bytes,1,opt,name=r2d_position,json=r2dPosition,proto3" json:"r2d_position,omitempty"`
	// Key type of map is string from node-id.
	NodeRecords   map[string]*RoutingNodeRecord `protobuf:"bytes,2,rep,name=node_records,json=nodeRecords,proto3" json:"node_records,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Routing) Reset() {
	*x = Routing{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{8}
}

func (x *Routing) GetR2DPosition() *Coordinate {
	if x != nil {
		return x.R2DPosition
	}
	return nil
}

func (x *Routing) GetNodeRecords() map[string]*RoutingNodeRecord {
	if x != nil {
		return x.NodeRecords
	}
	return nil
}

// for messaging module
type Messaging struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message       []byte                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Messaging) Reset() {
	*x = Messaging{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Messaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messaging) ProtoMessage() {}

func (x *Messaging) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messaging.ProtoReflect.Descriptor instead.
func (*Messaging) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{9}
}

func (x *Messaging) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Messaging) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type MessagingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      []byte                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessagingResponse) Reset() {
	*x = MessagingResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingResponse) ProtoMessage() {}

func (x *MessagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingResponse.ProtoReflect.Descriptor instead.
func (*MessagingResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{10}
}

func (x *MessagingResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

// for spread module
type Spread struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *NodeID                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Center        *Coordinate            `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	R             float64                `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty"`
	Uid           uint64                 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Message       []byte                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Opt           uint32                 `protobuf:"varint,7,opt,name=opt,proto3" json:"opt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spread) Reset() {
	*x = Spread{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spread) ProtoMessage() {}

func (x *Spread) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spread.ProtoReflect.Descriptor instead.
func (*Spread) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{11}
}

func (x *Spread) GetSource() *NodeID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Spread) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Spread) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Spread) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Spread) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spread) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Spread) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type SpreadKnock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Center        *Coordinate            `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	R             float64                `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	Uid           uint64                 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadKnock) Reset() {
	*x = SpreadKnock{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadKnock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadKnock) ProtoMessage() {}

func (x *SpreadKnock) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadKnock.ProtoReflect.Descriptor instead.
func (*SpreadKnock) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{12}
}

func (x *SpreadKnock) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SpreadKnock) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *SpreadKnock) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type SpreadKnockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accept        bool                   `protobuf:"varint,1,opt,name=accept,proto3" json:"accept,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadKnockResponse) Reset() {
	*x = SpreadKnockResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadKnockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadKnockResponse) ProtoMessage() {}

func (x *SpreadKnockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadKnockResponse.ProtoReflect.Descriptor instead.
func (*SpreadKnockResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{13}
}

func (x *SpreadKnockResponse) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

type SpreadRelay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *NodeID                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Center        *Coordinate            `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	R             float64                `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty"`
	Uid           uint64                 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Message       []byte                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Opt           uint32                 `protobuf:"varint,7,opt,name=opt,proto3" json:"opt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadRelay) Reset() {
	*x = SpreadRelay{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadRelay) ProtoMessage() {}

func (x *SpreadRelay) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadRelay.ProtoReflect.Descriptor instead.
func (*SpreadRelay) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{14}
}

func (x *SpreadRelay) GetSource() *NodeID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SpreadRelay) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SpreadRelay) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *SpreadRelay) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SpreadRelay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpreadRelay) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SpreadRelay) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type SpreadRelayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadRelayResponse) Reset() {
	*x = SpreadRelayResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadRelayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadRelayResponse) ProtoMessage() {}

func (x *SpreadRelayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadRelayResponse.ProtoReflect.Descriptor instead.
func (*SpreadRelayResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{15}
}

func (x *SpreadRelayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_colonio_v1alpha_colonio_proto protoreflect.FileDescriptor

const file_api_colonio_v1alpha_colonio_proto_rawDesc = "" +
	"\n" +
	"!api/colonio/v1alpha/colonio.proto\x12\x13api.colonio.v1alpha\"(\n" +
	"\n" +
	"Coordinate\x12\f\n" +
	"\x01x\x18\x01 \x01(\x01R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x01R\x01y\",\n" +
	"\x06NodeID\x12\x10\n" +
	"\x03id0\x18\x01 \x01(\x04R\x03id0\x12\x10\n" +
	"\x03id1\x18\x02 \x01(\x04R\x03id1\"H\n" +
	"\vNodePackets\x129\n" +
	"\apackets\x18\x01 \x03(\v2\x1f.api.colonio.v1alpha.NodePacketR\apackets\"\xbb\x01\n" +
	"\x0eNodePacketHead\x12;\n" +
	"\vdst_node_id\x18\x01 \x01(\v2\x1b.api.colonio.v1alpha.NodeIDR\tdstNodeId\x12;\n" +
	"\vsrc_node_id\x18\x02 \x01(\v2\x1b.api.colonio.v1alpha.NodeIDR\tsrcNodeId\x12\x1b\n" +
	"\thop_count\x18\x03 \x01(\rR\bhopCount\x12\x12\n" +
	"\x04mode\x18\x04 \x01(\rR\x04mode\"\x85\x01\n" +
	"\n" +
	"NodePacket\x127\n" +
	"\x04head\x18\x01 \x01(\v2#.api.colonio.v1alpha.NodePacketHeadR\x04head\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\rR\x02id\x12\x14\n" +
	"\x05index\x18\x03 \x01(\rR\x05index\x12\x18\n" +
	"\acontent\x18\x04 \x01(\fR\acontent\"\xa6\x05\n" +
	"\rPacketContent\x122\n" +
	"\x05error\x18\x01 \x01(\v2\x1a.api.colonio.v1alpha.ErrorH\x00R\x05error\x128\n" +
	"\arouting\x18\n" +
	" \x01(\v2\x1c.api.colonio.v1alpha.RoutingH\x00R\arouting\x12>\n" +
	"\tmessaging\x18\x14 \x01(\v2\x1e.api.colonio.v1alpha.MessagingH\x00R\tmessaging\x12W\n" +
	"\x12messaging_response\x18\x15 \x01(\v2&.api.colonio.v1alpha.MessagingResponseH\x00R\x11messagingResponse\x125\n" +
	"\x06spread\x182 \x01(\v2\x1b.api.colonio.v1alpha.SpreadH\x00R\x06spread\x12E\n" +
	"\fspread_knock\x183 \x01(\v2 .api.colonio.v1alpha.SpreadKnockH\x00R\vspreadKnock\x12^\n" +
	"\x15spread_knock_response\x184 \x01(\v2(.api.colonio.v1alpha.SpreadKnockResponseH\x00R\x13spreadKnockResponse\x12E\n" +
	"\fspread_relay\x185 \x01(\v2 .api.colonio.v1alpha.SpreadRelayH\x00R\vspreadRelay\x12^\n" +
	"\x15spread_relay_response\x186 \x01(\v2(.api.colonio.v1alpha.SpreadRelayResponseH\x00R\x13spreadRelayResponseB\t\n" +
	"\acontent\"5\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"t\n" +
	"\x11RoutingNodeRecord\x12\x1b\n" +
	"\tr1d_score\x18\x01 \x01(\x03R\br1dScore\x12B\n" +
	"\fr2d_position\x18\x02 \x01(\v2\x1f.api.colonio.v1alpha.CoordinateR\vr2dPosition\"\x87\x02\n" +
	"\aRouting\x12B\n" +
	"\fr2d_position\x18\x01 \x01(\v2\x1f.api.colonio.v1alpha.CoordinateR\vr2dPosition\x12P\n" +
	"\fnode_records\x18\x02 \x03(\v2-.api.colonio.v1alpha.Routing.NodeRecordsEntryR\vnodeRecords\x1af\n" +
	"\x10NodeRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12<\n" +
	"\x05value\x18\x02 \x01(\v2&.api.colonio.v1alpha.RoutingNodeRecordR\x05value:\x028\x01\"9\n" +
	"\tMessaging\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\amessage\x18\x02 \x01(\fR\amessage\"/\n" +
	"\x11MessagingResponse\x12\x1a\n" +
	"\bresponse\x18\x01 \x01(\fR\bresponse\"\xd6\x01\n" +
	"\x06Spread\x123\n" +
	"\x06source\x18\x01 \x01(\v2\x1b.api.colonio.v1alpha.NodeIDR\x06source\x127\n" +
	"\x06center\x18\x02 \x01(\v2\x1f.api.colonio.v1alpha.CoordinateR\x06center\x12\f\n" +
	"\x01r\x18\x03 \x01(\x01R\x01r\x12\x10\n" +
	"\x03uid\x18\x04 \x01(\x04R\x03uid\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x18\n" +
	"\amessage\x18\x06 \x01(\fR\amessage\x12\x10\n" +
	"\x03opt\x18\a \x01(\rR\x03opt\"f\n" +
	"\vSpreadKnock\x127\n" +
	"\x06center\x18\x01 \x01(\v2\x1f.api.colonio.v1alpha.CoordinateR\x06center\x12\f\n" +
	"\x01r\x18\x02 \x01(\x01R\x01r\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x04R\x03uid\"-\n" +
	"\x13SpreadKnockResponse\x12\x16\n" +
	"\x06accept\x18\x01 \x01(\bR\x06accept\"\xdb\x01\n" +
	"\vSpreadRelay\x123\n" +
	"\x06source\x18\x01 \x01(\v2\x1b.api.colonio.v1alpha.NodeIDR\x06source\x127\n" +
	"\x06center\x18\x02 \x01(\v2\x1f.api.colonio.v1alpha.CoordinateR\x06center\x12\f\n" +
	"\x01r\x18\x03 \x01(\x01R\x01r\x12\x10\n" +
	"\x03uid\x18\x04 \x01(\x04R\x03uid\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x18\n" +
	"\amessage\x18\x06 \x01(\fR\amessage\x12\x10\n" +
	"\x03opt\x18\a \x01(\rR\x03opt\"/\n" +
	"\x13SpreadRelayResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccessB5Z3github.com/llamerada-jp/colonio/api/colonio/v1alphab\x06proto3"

var (
	file_api_colonio_v1alpha_colonio_proto_rawDescOnce sync.Once
	file_api_colonio_v1alpha_colonio_proto_rawDescData []byte
)

func file_api_colonio_v1alpha_colonio_proto_rawDescGZIP() []byte {
	file_api_colonio_v1alpha_colonio_proto_rawDescOnce.Do(func() {
		file_api_colonio_v1alpha_colonio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_colonio_v1alpha_colonio_proto_rawDesc), len(file_api_colonio_v1alpha_colonio_proto_rawDesc)))
	})
	return file_api_colonio_v1alpha_colonio_proto_rawDescData
}

var file_api_colonio_v1alpha_colonio_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_colonio_v1alpha_colonio_proto_goTypes = []any{
	(*Coordinate)(nil),          // 0: api.colonio.v1alpha.Coordinate
	(*NodeID)(nil),              // 1: api.colonio.v1alpha.NodeID
	(*NodePackets)(nil),         // 2: api.colonio.v1alpha.NodePackets
	(*NodePacketHead)(nil),      // 3: api.colonio.v1alpha.NodePacketHead
	(*NodePacket)(nil),          // 4: api.colonio.v1alpha.NodePacket
	(*PacketContent)(nil),       // 5: api.colonio.v1alpha.PacketContent
	(*Error)(nil),               // 6: api.colonio.v1alpha.Error
	(*RoutingNodeRecord)(nil),   // 7: api.colonio.v1alpha.RoutingNodeRecord
	(*Routing)(nil),             // 8: api.colonio.v1alpha.Routing
	(*Messaging)(nil),           // 9: api.colonio.v1alpha.Messaging
	(*MessagingResponse)(nil),   // 10: api.colonio.v1alpha.MessagingResponse
	(*Spread)(nil),              // 11: api.colonio.v1alpha.Spread
	(*SpreadKnock)(nil),         // 12: api.colonio.v1alpha.SpreadKnock
	(*SpreadKnockResponse)(nil), // 13: api.colonio.v1alpha.SpreadKnockResponse
	(*SpreadRelay)(nil),         // 14: api.colonio.v1alpha.SpreadRelay
	(*SpreadRelayResponse)(nil), // 15: api.colonio.v1alpha.SpreadRelayResponse
	nil,                         // 16: api.colonio.v1alpha.Routing.NodeRecordsEntry
}
var file_api_colonio_v1alpha_colonio_proto_depIdxs = []int32{
	4,  // 0: api.colonio.v1alpha.NodePackets.packets:type_name -> api.colonio.v1alpha.NodePacket
	1,  // 1: api.colonio.v1alpha.NodePacketHead.dst_node_id:type_name -> api.colonio.v1alpha.NodeID
	1,  // 2: api.colonio.v1alpha.NodePacketHead.src_node_id:type_name -> api.colonio.v1alpha.NodeID
	3,  // 3: api.colonio.v1alpha.NodePacket.head:type_name -> api.colonio.v1alpha.NodePacketHead
	6,  // 4: api.colonio.v1alpha.PacketContent.error:type_name -> api.colonio.v1alpha.Error
	8,  // 5: api.colonio.v1alpha.PacketContent.routing:type_name -> api.colonio.v1alpha.Routing
	9,  // 6: api.colonio.v1alpha.PacketContent.messaging:type_name -> api.colonio.v1alpha.Messaging
	10, // 7: api.colonio.v1alpha.PacketContent.messaging_response:type_name -> api.colonio.v1alpha.MessagingResponse
	11, // 8: api.colonio.v1alpha.PacketContent.spread:type_name -> api.colonio.v1alpha.Spread
	12, // 9: api.colonio.v1alpha.PacketContent.spread_knock:type_name -> api.colonio.v1alpha.SpreadKnock
	13, // 10: api.colonio.v1alpha.PacketContent.spread_knock_response:type_name -> api.colonio.v1alpha.SpreadKnockResponse
	14, // 11: api.colonio.v1alpha.PacketContent.spread_relay:type_name -> api.colonio.v1alpha.SpreadRelay
	15, // 12: api.colonio.v1alpha.PacketContent.spread_relay_response:type_name -> api.colonio.v1alpha.SpreadRelayResponse
	0,  // 13: api.colonio.v1alpha.RoutingNodeRecord.r2d_position:type_name -> api.colonio.v1alpha.Coordinate
	0,  // 14: api.colonio.v1alpha.Routing.r2d_position:type_name -> api.colonio.v1alpha.Coordinate
	16, // 15: api.colonio.v1alpha.Routing.node_records:type_name -> api.colonio.v1alpha.Routing.NodeRecordsEntry
	1,  // 16: api.colonio.v1alpha.Spread.source:type_name -> api.colonio.v1alpha.NodeID
	0,  // 17: api.colonio.v1alpha.Spread.center:type_name -> api.colonio.v1alpha.Coordinate
	0,  // 18: api.colonio.v1alpha.SpreadKnock.center:type_name -> api.colonio.v1alpha.Coordinate
	1,  // 19: api.colonio.v1alpha.SpreadRelay.source:type_name -> api.colonio.v1alpha.NodeID
	0,  // 20: api.colonio.v1alpha.SpreadRelay.center:type_name -> api.colonio.v1alpha.Coordinate
	7,  // 21: api.colonio.v1alpha.Routing.NodeRecordsEntry.value:type_name -> api.colonio.v1alpha.RoutingNodeRecord
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_colonio_v1alpha_colonio_proto_init() }
func file_api_colonio_v1alpha_colonio_proto_init() {
	if File_api_colonio_v1alpha_colonio_proto != nil {
		return
	}
	file_api_colonio_v1alpha_colonio_proto_msgTypes[5].OneofWrappers = []any{
		(*PacketContent_Error)(nil),
		(*PacketContent_Routing)(nil),
		(*PacketContent_Messaging)(nil),
		(*PacketContent_MessagingResponse)(nil),
		(*PacketContent_Spread)(nil),
		(*PacketContent_SpreadKnock)(nil),
		(*PacketContent_SpreadKnockResponse)(nil),
		(*PacketContent_SpreadRelay)(nil),
		(*PacketContent_SpreadRelayResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_colonio_v1alpha_colonio_proto_rawDesc), len(file_api_colonio_v1alpha_colonio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_colonio_v1alpha_colonio_proto_goTypes,
		DependencyIndexes: file_api_colonio_v1alpha_colonio_proto_depIdxs,
		MessageInfos:      file_api_colonio_v1alpha_colonio_proto_msgTypes,
	}.Build()
	File_api_colonio_v1alpha_colonio_proto = out.File
	file_api_colonio_v1alpha_colonio_proto_goTypes = nil
	file_api_colonio_v1alpha_colonio_proto_depIdxs = nil
}
