// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/colonio/v1alpha/colonio.proto

package v1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// basic types
type Coordinate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinate) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinate) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type NodeID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          uint32                 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id0           uint64                 `protobuf:"varint,2,opt,name=id0,proto3" json:"id0,omitempty"`
	Id1           uint64                 `protobuf:"varint,3,opt,name=id1,proto3" json:"id1,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeID) Reset() {
	*x = NodeID{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeID) ProtoMessage() {}

func (x *NodeID) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeID.ProtoReflect.Descriptor instead.
func (*NodeID) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{1}
}

func (x *NodeID) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NodeID) GetId0() uint64 {
	if x != nil {
		return x.Id0
	}
	return 0
}

func (x *NodeID) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

// node-node packet container
// Or use an empty message as a ping to cancel the timeout.
type NodePackets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packets       []*NodePacket          `protobuf:"bytes,1,rep,name=packets,proto3" json:"packets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePackets) Reset() {
	*x = NodePackets{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePackets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePackets) ProtoMessage() {}

func (x *NodePackets) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePackets.ProtoReflect.Descriptor instead.
func (*NodePackets) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{2}
}

func (x *NodePackets) GetPackets() []*NodePacket {
	if x != nil {
		return x.Packets
	}
	return nil
}

type NodePacketHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstNodeId     *NodeID                `protobuf:"bytes,1,opt,name=dst_node_id,json=dstNodeId,proto3" json:"dst_node_id,omitempty"`
	SrcNodeId     *NodeID                `protobuf:"bytes,2,opt,name=src_node_id,json=srcNodeId,proto3" json:"src_node_id,omitempty"`
	HopCount      uint32                 `protobuf:"varint,3,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Mode          uint32                 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePacketHead) Reset() {
	*x = NodePacketHead{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePacketHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePacketHead) ProtoMessage() {}

func (x *NodePacketHead) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePacketHead.ProtoReflect.Descriptor instead.
func (*NodePacketHead) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{3}
}

func (x *NodePacketHead) GetDstNodeId() *NodeID {
	if x != nil {
		return x.DstNodeId
	}
	return nil
}

func (x *NodePacketHead) GetSrcNodeId() *NodeID {
	if x != nil {
		return x.SrcNodeId
	}
	return nil
}

func (x *NodePacketHead) GetHopCount() uint32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *NodePacketHead) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type NodePacket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable head if index is 0.
	Head *NodePacketHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// ID is common to sequence of packets.
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// index decreases by 1 in a sequence of packets.
	Index         uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Content       []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePacket) Reset() {
	*x = NodePacket{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePacket) ProtoMessage() {}

func (x *NodePacket) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePacket.ProtoReflect.Descriptor instead.
func (*NodePacket) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{4}
}

func (x *NodePacket) GetHead() *NodePacketHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *NodePacket) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodePacket) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NodePacket) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type PacketContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*PacketContent_Error
	//	*PacketContent_Routing
	//	*PacketContent_Messaging
	//	*PacketContent_MessagingResponse
	//	*PacketContent_KvsAccept
	//	*PacketContent_KvsAcceptResponse
	//	*PacketContent_KvsBalanceAcceptor
	//	*PacketContent_KvsBalanceProposer
	//	*PacketContent_KvsGet
	//	*PacketContent_KvsGetResponse
	//	*PacketContent_KvsHint
	//	*PacketContent_KvsPrepare
	//	*PacketContent_KvsPrepareResponse
	//	*PacketContent_KvsSet
	//	*PacketContent_KvsSetResponse
	//	*PacketContent_Spread
	//	*PacketContent_SpreadKnock
	//	*PacketContent_SpreadKnockResponse
	//	*PacketContent_SpreadRelay
	//	*PacketContent_SpreadRelayResponse
	Content       isPacketContent_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketContent) Reset() {
	*x = PacketContent{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketContent) ProtoMessage() {}

func (x *PacketContent) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketContent.ProtoReflect.Descriptor instead.
func (*PacketContent) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{5}
}

func (x *PacketContent) GetContent() isPacketContent_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PacketContent) GetError() *Error {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *PacketContent) GetRouting() *Routing {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Routing); ok {
			return x.Routing
		}
	}
	return nil
}

func (x *PacketContent) GetMessaging() *Messaging {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Messaging); ok {
			return x.Messaging
		}
	}
	return nil
}

func (x *PacketContent) GetMessagingResponse() *MessagingResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_MessagingResponse); ok {
			return x.MessagingResponse
		}
	}
	return nil
}

func (x *PacketContent) GetKvsAccept() *KvsAccept {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsAccept); ok {
			return x.KvsAccept
		}
	}
	return nil
}

func (x *PacketContent) GetKvsAcceptResponse() *KvsAcceptResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsAcceptResponse); ok {
			return x.KvsAcceptResponse
		}
	}
	return nil
}

func (x *PacketContent) GetKvsBalanceAcceptor() *KvsBalanceAcceptor {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsBalanceAcceptor); ok {
			return x.KvsBalanceAcceptor
		}
	}
	return nil
}

func (x *PacketContent) GetKvsBalanceProposer() *KvsBalanceProposer {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsBalanceProposer); ok {
			return x.KvsBalanceProposer
		}
	}
	return nil
}

func (x *PacketContent) GetKvsGet() *KvsGet {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsGet); ok {
			return x.KvsGet
		}
	}
	return nil
}

func (x *PacketContent) GetKvsGetResponse() *KvsGetResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsGetResponse); ok {
			return x.KvsGetResponse
		}
	}
	return nil
}

func (x *PacketContent) GetKvsHint() *KvsHint {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsHint); ok {
			return x.KvsHint
		}
	}
	return nil
}

func (x *PacketContent) GetKvsPrepare() *KvsPrepare {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsPrepare); ok {
			return x.KvsPrepare
		}
	}
	return nil
}

func (x *PacketContent) GetKvsPrepareResponse() *KvsPrepareResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsPrepareResponse); ok {
			return x.KvsPrepareResponse
		}
	}
	return nil
}

func (x *PacketContent) GetKvsSet() *KvsSet {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsSet); ok {
			return x.KvsSet
		}
	}
	return nil
}

func (x *PacketContent) GetKvsSetResponse() *KvsSetResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_KvsSetResponse); ok {
			return x.KvsSetResponse
		}
	}
	return nil
}

func (x *PacketContent) GetSpread() *Spread {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_Spread); ok {
			return x.Spread
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadKnock() *SpreadKnock {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadKnock); ok {
			return x.SpreadKnock
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadKnockResponse() *SpreadKnockResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadKnockResponse); ok {
			return x.SpreadKnockResponse
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadRelay() *SpreadRelay {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadRelay); ok {
			return x.SpreadRelay
		}
	}
	return nil
}

func (x *PacketContent) GetSpreadRelayResponse() *SpreadRelayResponse {
	if x != nil {
		if x, ok := x.Content.(*PacketContent_SpreadRelayResponse); ok {
			return x.SpreadRelayResponse
		}
	}
	return nil
}

type isPacketContent_Content interface {
	isPacketContent_Content()
}

type PacketContent_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type PacketContent_Routing struct {
	Routing *Routing `protobuf:"bytes,10,opt,name=routing,proto3,oneof"`
}

type PacketContent_Messaging struct {
	Messaging *Messaging `protobuf:"bytes,20,opt,name=messaging,proto3,oneof"`
}

type PacketContent_MessagingResponse struct {
	MessagingResponse *MessagingResponse `protobuf:"bytes,21,opt,name=messaging_response,json=messagingResponse,proto3,oneof"`
}

type PacketContent_KvsAccept struct {
	KvsAccept *KvsAccept `protobuf:"bytes,30,opt,name=kvs_accept,json=kvsAccept,proto3,oneof"`
}

type PacketContent_KvsAcceptResponse struct {
	KvsAcceptResponse *KvsAcceptResponse `protobuf:"bytes,31,opt,name=kvs_accept_response,json=kvsAcceptResponse,proto3,oneof"`
}

type PacketContent_KvsBalanceAcceptor struct {
	KvsBalanceAcceptor *KvsBalanceAcceptor `protobuf:"bytes,32,opt,name=kvs_balance_acceptor,json=kvsBalanceAcceptor,proto3,oneof"`
}

type PacketContent_KvsBalanceProposer struct {
	KvsBalanceProposer *KvsBalanceProposer `protobuf:"bytes,33,opt,name=kvs_balance_proposer,json=kvsBalanceProposer,proto3,oneof"`
}

type PacketContent_KvsGet struct {
	KvsGet *KvsGet `protobuf:"bytes,34,opt,name=kvs_get,json=kvsGet,proto3,oneof"`
}

type PacketContent_KvsGetResponse struct {
	KvsGetResponse *KvsGetResponse `protobuf:"bytes,35,opt,name=kvs_get_response,json=kvsGetResponse,proto3,oneof"`
}

type PacketContent_KvsHint struct {
	KvsHint *KvsHint `protobuf:"bytes,36,opt,name=kvs_hint,json=kvsHint,proto3,oneof"`
}

type PacketContent_KvsPrepare struct {
	KvsPrepare *KvsPrepare `protobuf:"bytes,37,opt,name=kvs_prepare,json=kvsPrepare,proto3,oneof"`
}

type PacketContent_KvsPrepareResponse struct {
	KvsPrepareResponse *KvsPrepareResponse `protobuf:"bytes,38,opt,name=kvs_prepare_response,json=kvsPrepareResponse,proto3,oneof"`
}

type PacketContent_KvsSet struct {
	KvsSet *KvsSet `protobuf:"bytes,39,opt,name=kvs_set,json=kvsSet,proto3,oneof"`
}

type PacketContent_KvsSetResponse struct {
	KvsSetResponse *KvsSetResponse `protobuf:"bytes,40,opt,name=kvs_set_response,json=kvsSetResponse,proto3,oneof"`
}

type PacketContent_Spread struct {
	Spread *Spread `protobuf:"bytes,50,opt,name=spread,proto3,oneof"`
}

type PacketContent_SpreadKnock struct {
	SpreadKnock *SpreadKnock `protobuf:"bytes,51,opt,name=spread_knock,json=spreadKnock,proto3,oneof"`
}

type PacketContent_SpreadKnockResponse struct {
	SpreadKnockResponse *SpreadKnockResponse `protobuf:"bytes,52,opt,name=spread_knock_response,json=spreadKnockResponse,proto3,oneof"`
}

type PacketContent_SpreadRelay struct {
	SpreadRelay *SpreadRelay `protobuf:"bytes,53,opt,name=spread_relay,json=spreadRelay,proto3,oneof"`
}

type PacketContent_SpreadRelayResponse struct {
	SpreadRelayResponse *SpreadRelayResponse `protobuf:"bytes,54,opt,name=spread_relay_response,json=spreadRelayResponse,proto3,oneof"`
}

func (*PacketContent_Error) isPacketContent_Content() {}

func (*PacketContent_Routing) isPacketContent_Content() {}

func (*PacketContent_Messaging) isPacketContent_Content() {}

func (*PacketContent_MessagingResponse) isPacketContent_Content() {}

func (*PacketContent_KvsAccept) isPacketContent_Content() {}

func (*PacketContent_KvsAcceptResponse) isPacketContent_Content() {}

func (*PacketContent_KvsBalanceAcceptor) isPacketContent_Content() {}

func (*PacketContent_KvsBalanceProposer) isPacketContent_Content() {}

func (*PacketContent_KvsGet) isPacketContent_Content() {}

func (*PacketContent_KvsGetResponse) isPacketContent_Content() {}

func (*PacketContent_KvsHint) isPacketContent_Content() {}

func (*PacketContent_KvsPrepare) isPacketContent_Content() {}

func (*PacketContent_KvsPrepareResponse) isPacketContent_Content() {}

func (*PacketContent_KvsSet) isPacketContent_Content() {}

func (*PacketContent_KvsSetResponse) isPacketContent_Content() {}

func (*PacketContent_Spread) isPacketContent_Content() {}

func (*PacketContent_SpreadKnock) isPacketContent_Content() {}

func (*PacketContent_SpreadKnockResponse) isPacketContent_Content() {}

func (*PacketContent_SpreadRelay) isPacketContent_Content() {}

func (*PacketContent_SpreadRelayResponse) isPacketContent_Content() {}

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// for routing
type RoutingNodeRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	R1DScore      int64                  `protobuf:"varint,1,opt,name=r1d_score,json=r1dScore,proto3" json:"r1d_score,omitempty"`
	R2DPosition   *Coordinate            `protobuf:"bytes,2,opt,name=r2d_position,json=r2dPosition,proto3" json:"r2d_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutingNodeRecord) Reset() {
	*x = RoutingNodeRecord{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutingNodeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingNodeRecord) ProtoMessage() {}

func (x *RoutingNodeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingNodeRecord.ProtoReflect.Descriptor instead.
func (*RoutingNodeRecord) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{7}
}

func (x *RoutingNodeRecord) GetR1DScore() int64 {
	if x != nil {
		return x.R1DScore
	}
	return 0
}

func (x *RoutingNodeRecord) GetR2DPosition() *Coordinate {
	if x != nil {
		return x.R2DPosition
	}
	return nil
}

type Routing struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	R2DPosition *Coordinate            `protobuf:"bytes,1,opt,name=r2d_position,json=r2dPosition,proto3" json:"r2d_position,omitempty"`
	// Key type of map is string from node-id.
	NodeRecords   map[string]*RoutingNodeRecord `protobuf:"bytes,2,rep,name=node_records,json=nodeRecords,proto3" json:"node_records,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Routing) Reset() {
	*x = Routing{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{8}
}

func (x *Routing) GetR2DPosition() *Coordinate {
	if x != nil {
		return x.R2DPosition
	}
	return nil
}

func (x *Routing) GetNodeRecords() map[string]*RoutingNodeRecord {
	if x != nil {
		return x.NodeRecords
	}
	return nil
}

// for messaging module
type Messaging struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message       []byte                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Messaging) Reset() {
	*x = Messaging{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Messaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messaging) ProtoMessage() {}

func (x *Messaging) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messaging.ProtoReflect.Descriptor instead.
func (*Messaging) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{9}
}

func (x *Messaging) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Messaging) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type MessagingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      []byte                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessagingResponse) Reset() {
	*x = MessagingResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingResponse) ProtoMessage() {}

func (x *MessagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingResponse.ProtoReflect.Descriptor instead.
func (*MessagingResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{10}
}

func (x *MessagingResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

// for kvs module
type KvsAccept struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Opt           uint32                 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	N             uint32                 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	I             uint32                 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	MemberIdx     uint32                 `protobuf:"varint,4,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsAccept) Reset() {
	*x = KvsAccept{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsAccept) ProtoMessage() {}

func (x *KvsAccept) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsAccept.ProtoReflect.Descriptor instead.
func (*KvsAccept) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{11}
}

func (x *KvsAccept) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *KvsAccept) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsAccept) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *KvsAccept) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsAccept) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsAccept) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsAcceptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	N             uint32                 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	I             uint32                 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsAcceptResponse) Reset() {
	*x = KvsAcceptResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsAcceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsAcceptResponse) ProtoMessage() {}

func (x *KvsAcceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsAcceptResponse.ProtoReflect.Descriptor instead.
func (*KvsAcceptResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{12}
}

func (x *KvsAcceptResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsAcceptResponse) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsAcceptResponse) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

type KvsBalanceAcceptor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Na            uint32                 `protobuf:"varint,1,opt,name=na,proto3" json:"na,omitempty"`
	Np            uint32                 `protobuf:"varint,2,opt,name=np,proto3" json:"np,omitempty"`
	Ia            uint32                 `protobuf:"varint,3,opt,name=ia,proto3" json:"ia,omitempty"`
	MemberIdx     uint32                 `protobuf:"varint,4,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsBalanceAcceptor) Reset() {
	*x = KvsBalanceAcceptor{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsBalanceAcceptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsBalanceAcceptor) ProtoMessage() {}

func (x *KvsBalanceAcceptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsBalanceAcceptor.ProtoReflect.Descriptor instead.
func (*KvsBalanceAcceptor) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{13}
}

func (x *KvsBalanceAcceptor) GetNa() uint32 {
	if x != nil {
		return x.Na
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetNp() uint32 {
	if x != nil {
		return x.Np
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetIa() uint32 {
	if x != nil {
		return x.Ia
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsBalanceAcceptor) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsBalanceAcceptor) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsBalanceProposer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Np            uint32                 `protobuf:"varint,1,opt,name=np,proto3" json:"np,omitempty"`
	Ip            uint32                 `protobuf:"varint,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsBalanceProposer) Reset() {
	*x = KvsBalanceProposer{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsBalanceProposer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsBalanceProposer) ProtoMessage() {}

func (x *KvsBalanceProposer) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsBalanceProposer.ProtoReflect.Descriptor instead.
func (*KvsBalanceProposer) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{14}
}

func (x *KvsBalanceProposer) GetNp() uint32 {
	if x != nil {
		return x.Np
	}
	return 0
}

func (x *KvsBalanceProposer) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *KvsBalanceProposer) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsBalanceProposer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsGet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemberIdx     uint32                 `protobuf:"varint,1,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsGet) Reset() {
	*x = KvsGet{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsGet) ProtoMessage() {}

func (x *KvsGet) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsGet.ProtoReflect.Descriptor instead.
func (*KvsGet) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{15}
}

func (x *KvsGet) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsGet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type KvsGetResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The values below are used only success response.
	N             uint32 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	I             uint32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	Value         []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsGetResponse) Reset() {
	*x = KvsGetResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsGetResponse) ProtoMessage() {}

func (x *KvsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsGetResponse.ProtoReflect.Descriptor instead.
func (*KvsGetResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{16}
}

func (x *KvsGetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsGetResponse) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsGetResponse) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *KvsGetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsHint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	N             uint32                 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	I             uint32                 `protobuf:"varint,2,opt,name=i,proto3" json:"i,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsHint) Reset() {
	*x = KvsHint{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsHint) ProtoMessage() {}

func (x *KvsHint) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsHint.ProtoReflect.Descriptor instead.
func (*KvsHint) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{17}
}

func (x *KvsHint) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsHint) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *KvsHint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsHint) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsPrepare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Opt           uint32                 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	N             uint32                 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	MemberIdx     uint32                 `protobuf:"varint,3,opt,name=member_idx,json=memberIdx,proto3" json:"member_idx,omitempty"`
	Key           string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsPrepare) Reset() {
	*x = KvsPrepare{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsPrepare) ProtoMessage() {}

func (x *KvsPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsPrepare.ProtoReflect.Descriptor instead.
func (*KvsPrepare) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{18}
}

func (x *KvsPrepare) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *KvsPrepare) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsPrepare) GetMemberIdx() uint32 {
	if x != nil {
		return x.MemberIdx
	}
	return 0
}

func (x *KvsPrepare) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type KvsPrepareResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	N       uint32                 `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	// `i` is set only success response.
	I             uint32 `protobuf:"varint,3,opt,name=i,proto3" json:"i,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsPrepareResponse) Reset() {
	*x = KvsPrepareResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsPrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsPrepareResponse) ProtoMessage() {}

func (x *KvsPrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsPrepareResponse.ProtoReflect.Descriptor instead.
func (*KvsPrepareResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{19}
}

func (x *KvsPrepareResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsPrepareResponse) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *KvsPrepareResponse) GetI() uint32 {
	if x != nil {
		return x.I
	}
	return 0
}

type KvsSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Opt           uint32                 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsSet) Reset() {
	*x = KvsSet{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsSet) ProtoMessage() {}

func (x *KvsSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsSet.ProtoReflect.Descriptor instead.
func (*KvsSet) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{20}
}

func (x *KvsSet) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *KvsSet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvsSet) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KvsSetResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// `reason` are set when failed response.
	Reason        uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvsSetResponse) Reset() {
	*x = KvsSetResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvsSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvsSetResponse) ProtoMessage() {}

func (x *KvsSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvsSetResponse.ProtoReflect.Descriptor instead.
func (*KvsSetResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{21}
}

func (x *KvsSetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KvsSetResponse) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

// for spread module
type Spread struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *NodeID                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Center        *Coordinate            `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	R             float64                `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty"`
	Uid           uint64                 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Message       []byte                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Opt           uint32                 `protobuf:"varint,7,opt,name=opt,proto3" json:"opt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spread) Reset() {
	*x = Spread{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spread) ProtoMessage() {}

func (x *Spread) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spread.ProtoReflect.Descriptor instead.
func (*Spread) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{22}
}

func (x *Spread) GetSource() *NodeID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Spread) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Spread) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Spread) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Spread) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spread) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Spread) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type SpreadKnock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Center        *Coordinate            `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	R             float64                `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	Uid           uint64                 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadKnock) Reset() {
	*x = SpreadKnock{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadKnock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadKnock) ProtoMessage() {}

func (x *SpreadKnock) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadKnock.ProtoReflect.Descriptor instead.
func (*SpreadKnock) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{23}
}

func (x *SpreadKnock) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SpreadKnock) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *SpreadKnock) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type SpreadKnockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accept        bool                   `protobuf:"varint,1,opt,name=accept,proto3" json:"accept,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadKnockResponse) Reset() {
	*x = SpreadKnockResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadKnockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadKnockResponse) ProtoMessage() {}

func (x *SpreadKnockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadKnockResponse.ProtoReflect.Descriptor instead.
func (*SpreadKnockResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{24}
}

func (x *SpreadKnockResponse) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

type SpreadRelay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *NodeID                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Center        *Coordinate            `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	R             float64                `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty"`
	Uid           uint64                 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Message       []byte                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Opt           uint32                 `protobuf:"varint,7,opt,name=opt,proto3" json:"opt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadRelay) Reset() {
	*x = SpreadRelay{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadRelay) ProtoMessage() {}

func (x *SpreadRelay) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadRelay.ProtoReflect.Descriptor instead.
func (*SpreadRelay) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{25}
}

func (x *SpreadRelay) GetSource() *NodeID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SpreadRelay) GetCenter() *Coordinate {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SpreadRelay) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *SpreadRelay) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SpreadRelay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpreadRelay) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SpreadRelay) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type SpreadRelayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpreadRelayResponse) Reset() {
	*x = SpreadRelayResponse{}
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpreadRelayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadRelayResponse) ProtoMessage() {}

func (x *SpreadRelayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_colonio_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadRelayResponse.ProtoReflect.Descriptor instead.
func (*SpreadRelayResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_colonio_proto_rawDescGZIP(), []int{26}
}

func (x *SpreadRelayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_colonio_v1alpha_colonio_proto protoreflect.FileDescriptor

var file_api_colonio_v1alpha_colonio_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0x28, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x22, 0x40, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x64, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x64, 0x31, 0x22, 0x48, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xbb,
	0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x52, 0x09, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x68, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xe9, 0x0b, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x6b, 0x76, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x58,
	0x0a, 0x13, 0x6b, 0x76, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x6b, 0x76, 0x73, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x76, 0x73,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x12, 0x6b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x14, 0x6b, 0x76, 0x73, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x76, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12,
	0x6b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x6b, 0x76, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x76, 0x73, 0x47, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x6b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x6b, 0x76,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x76, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x76, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6b,
	0x76, 0x73, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4b, 0x76, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6b,
	0x76, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x6b, 0x76, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x6b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x6b, 0x76,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b,
	0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x6b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6b, 0x76, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b,
	0x76, 0x73, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x4f, 0x0a, 0x10, 0x6b, 0x76, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x6b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x12, 0x5e,
	0x0a, 0x15, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x31, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x31, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x32, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x72, 0x32, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x02,
	0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x32, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x72, 0x32, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a,
	0x66, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x2f, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6f, 0x70, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x4b, 0x76, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x69, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x4b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x5c, 0x0a, 0x12, 0x4b, 0x76, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x6e, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a,
	0x06, 0x4b, 0x76, 0x73, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x0e, 0x4b, 0x76, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x07, 0x4b, 0x76, 0x73, 0x48, 0x69, 0x6e,
	0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12,
	0x0c, 0x0a, 0x01, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x0a, 0x4b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x4a, 0x0a, 0x12, 0x4b, 0x76, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x69,
	0x22, 0x42, 0x0a, 0x06, 0x4b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x4b, 0x76, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x06, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70,
	0x74, 0x22, 0x66, 0x0a, 0x0b, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b,
	0x12, 0x37, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x64, 0x61, 0x2d,
	0x6a, 0x70, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_colonio_v1alpha_colonio_proto_rawDescOnce sync.Once
	file_api_colonio_v1alpha_colonio_proto_rawDescData []byte
)

func file_api_colonio_v1alpha_colonio_proto_rawDescGZIP() []byte {
	file_api_colonio_v1alpha_colonio_proto_rawDescOnce.Do(func() {
		file_api_colonio_v1alpha_colonio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_colonio_v1alpha_colonio_proto_rawDesc), len(file_api_colonio_v1alpha_colonio_proto_rawDesc)))
	})
	return file_api_colonio_v1alpha_colonio_proto_rawDescData
}

var file_api_colonio_v1alpha_colonio_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_api_colonio_v1alpha_colonio_proto_goTypes = []any{
	(*Coordinate)(nil),          // 0: api.colonio.v1alpha.Coordinate
	(*NodeID)(nil),              // 1: api.colonio.v1alpha.NodeID
	(*NodePackets)(nil),         // 2: api.colonio.v1alpha.NodePackets
	(*NodePacketHead)(nil),      // 3: api.colonio.v1alpha.NodePacketHead
	(*NodePacket)(nil),          // 4: api.colonio.v1alpha.NodePacket
	(*PacketContent)(nil),       // 5: api.colonio.v1alpha.PacketContent
	(*Error)(nil),               // 6: api.colonio.v1alpha.Error
	(*RoutingNodeRecord)(nil),   // 7: api.colonio.v1alpha.RoutingNodeRecord
	(*Routing)(nil),             // 8: api.colonio.v1alpha.Routing
	(*Messaging)(nil),           // 9: api.colonio.v1alpha.Messaging
	(*MessagingResponse)(nil),   // 10: api.colonio.v1alpha.MessagingResponse
	(*KvsAccept)(nil),           // 11: api.colonio.v1alpha.KvsAccept
	(*KvsAcceptResponse)(nil),   // 12: api.colonio.v1alpha.KvsAcceptResponse
	(*KvsBalanceAcceptor)(nil),  // 13: api.colonio.v1alpha.KvsBalanceAcceptor
	(*KvsBalanceProposer)(nil),  // 14: api.colonio.v1alpha.KvsBalanceProposer
	(*KvsGet)(nil),              // 15: api.colonio.v1alpha.KvsGet
	(*KvsGetResponse)(nil),      // 16: api.colonio.v1alpha.KvsGetResponse
	(*KvsHint)(nil),             // 17: api.colonio.v1alpha.KvsHint
	(*KvsPrepare)(nil),          // 18: api.colonio.v1alpha.KvsPrepare
	(*KvsPrepareResponse)(nil),  // 19: api.colonio.v1alpha.KvsPrepareResponse
	(*KvsSet)(nil),              // 20: api.colonio.v1alpha.KvsSet
	(*KvsSetResponse)(nil),      // 21: api.colonio.v1alpha.KvsSetResponse
	(*Spread)(nil),              // 22: api.colonio.v1alpha.Spread
	(*SpreadKnock)(nil),         // 23: api.colonio.v1alpha.SpreadKnock
	(*SpreadKnockResponse)(nil), // 24: api.colonio.v1alpha.SpreadKnockResponse
	(*SpreadRelay)(nil),         // 25: api.colonio.v1alpha.SpreadRelay
	(*SpreadRelayResponse)(nil), // 26: api.colonio.v1alpha.SpreadRelayResponse
	nil,                         // 27: api.colonio.v1alpha.Routing.NodeRecordsEntry
}
var file_api_colonio_v1alpha_colonio_proto_depIdxs = []int32{
	4,  // 0: api.colonio.v1alpha.NodePackets.packets:type_name -> api.colonio.v1alpha.NodePacket
	1,  // 1: api.colonio.v1alpha.NodePacketHead.dst_node_id:type_name -> api.colonio.v1alpha.NodeID
	1,  // 2: api.colonio.v1alpha.NodePacketHead.src_node_id:type_name -> api.colonio.v1alpha.NodeID
	3,  // 3: api.colonio.v1alpha.NodePacket.head:type_name -> api.colonio.v1alpha.NodePacketHead
	6,  // 4: api.colonio.v1alpha.PacketContent.error:type_name -> api.colonio.v1alpha.Error
	8,  // 5: api.colonio.v1alpha.PacketContent.routing:type_name -> api.colonio.v1alpha.Routing
	9,  // 6: api.colonio.v1alpha.PacketContent.messaging:type_name -> api.colonio.v1alpha.Messaging
	10, // 7: api.colonio.v1alpha.PacketContent.messaging_response:type_name -> api.colonio.v1alpha.MessagingResponse
	11, // 8: api.colonio.v1alpha.PacketContent.kvs_accept:type_name -> api.colonio.v1alpha.KvsAccept
	12, // 9: api.colonio.v1alpha.PacketContent.kvs_accept_response:type_name -> api.colonio.v1alpha.KvsAcceptResponse
	13, // 10: api.colonio.v1alpha.PacketContent.kvs_balance_acceptor:type_name -> api.colonio.v1alpha.KvsBalanceAcceptor
	14, // 11: api.colonio.v1alpha.PacketContent.kvs_balance_proposer:type_name -> api.colonio.v1alpha.KvsBalanceProposer
	15, // 12: api.colonio.v1alpha.PacketContent.kvs_get:type_name -> api.colonio.v1alpha.KvsGet
	16, // 13: api.colonio.v1alpha.PacketContent.kvs_get_response:type_name -> api.colonio.v1alpha.KvsGetResponse
	17, // 14: api.colonio.v1alpha.PacketContent.kvs_hint:type_name -> api.colonio.v1alpha.KvsHint
	18, // 15: api.colonio.v1alpha.PacketContent.kvs_prepare:type_name -> api.colonio.v1alpha.KvsPrepare
	19, // 16: api.colonio.v1alpha.PacketContent.kvs_prepare_response:type_name -> api.colonio.v1alpha.KvsPrepareResponse
	20, // 17: api.colonio.v1alpha.PacketContent.kvs_set:type_name -> api.colonio.v1alpha.KvsSet
	21, // 18: api.colonio.v1alpha.PacketContent.kvs_set_response:type_name -> api.colonio.v1alpha.KvsSetResponse
	22, // 19: api.colonio.v1alpha.PacketContent.spread:type_name -> api.colonio.v1alpha.Spread
	23, // 20: api.colonio.v1alpha.PacketContent.spread_knock:type_name -> api.colonio.v1alpha.SpreadKnock
	24, // 21: api.colonio.v1alpha.PacketContent.spread_knock_response:type_name -> api.colonio.v1alpha.SpreadKnockResponse
	25, // 22: api.colonio.v1alpha.PacketContent.spread_relay:type_name -> api.colonio.v1alpha.SpreadRelay
	26, // 23: api.colonio.v1alpha.PacketContent.spread_relay_response:type_name -> api.colonio.v1alpha.SpreadRelayResponse
	0,  // 24: api.colonio.v1alpha.RoutingNodeRecord.r2d_position:type_name -> api.colonio.v1alpha.Coordinate
	0,  // 25: api.colonio.v1alpha.Routing.r2d_position:type_name -> api.colonio.v1alpha.Coordinate
	27, // 26: api.colonio.v1alpha.Routing.node_records:type_name -> api.colonio.v1alpha.Routing.NodeRecordsEntry
	1,  // 27: api.colonio.v1alpha.Spread.source:type_name -> api.colonio.v1alpha.NodeID
	0,  // 28: api.colonio.v1alpha.Spread.center:type_name -> api.colonio.v1alpha.Coordinate
	0,  // 29: api.colonio.v1alpha.SpreadKnock.center:type_name -> api.colonio.v1alpha.Coordinate
	1,  // 30: api.colonio.v1alpha.SpreadRelay.source:type_name -> api.colonio.v1alpha.NodeID
	0,  // 31: api.colonio.v1alpha.SpreadRelay.center:type_name -> api.colonio.v1alpha.Coordinate
	7,  // 32: api.colonio.v1alpha.Routing.NodeRecordsEntry.value:type_name -> api.colonio.v1alpha.RoutingNodeRecord
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_api_colonio_v1alpha_colonio_proto_init() }
func file_api_colonio_v1alpha_colonio_proto_init() {
	if File_api_colonio_v1alpha_colonio_proto != nil {
		return
	}
	file_api_colonio_v1alpha_colonio_proto_msgTypes[5].OneofWrappers = []any{
		(*PacketContent_Error)(nil),
		(*PacketContent_Routing)(nil),
		(*PacketContent_Messaging)(nil),
		(*PacketContent_MessagingResponse)(nil),
		(*PacketContent_KvsAccept)(nil),
		(*PacketContent_KvsAcceptResponse)(nil),
		(*PacketContent_KvsBalanceAcceptor)(nil),
		(*PacketContent_KvsBalanceProposer)(nil),
		(*PacketContent_KvsGet)(nil),
		(*PacketContent_KvsGetResponse)(nil),
		(*PacketContent_KvsHint)(nil),
		(*PacketContent_KvsPrepare)(nil),
		(*PacketContent_KvsPrepareResponse)(nil),
		(*PacketContent_KvsSet)(nil),
		(*PacketContent_KvsSetResponse)(nil),
		(*PacketContent_Spread)(nil),
		(*PacketContent_SpreadKnock)(nil),
		(*PacketContent_SpreadKnockResponse)(nil),
		(*PacketContent_SpreadRelay)(nil),
		(*PacketContent_SpreadRelayResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_colonio_v1alpha_colonio_proto_rawDesc), len(file_api_colonio_v1alpha_colonio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_colonio_v1alpha_colonio_proto_goTypes,
		DependencyIndexes: file_api_colonio_v1alpha_colonio_proto_depIdxs,
		MessageInfos:      file_api_colonio_v1alpha_colonio_proto_msgTypes,
	}.Build()
	File_api_colonio_v1alpha_colonio_proto = out.File
	file_api_colonio_v1alpha_colonio_proto_goTypes = nil
	file_api_colonio_v1alpha_colonio_proto_depIdxs = nil
}
