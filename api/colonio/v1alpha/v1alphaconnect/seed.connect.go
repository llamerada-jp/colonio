// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/colonio/v1alpha/seed.proto

package v1alphaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha "github.com/llamerada-jp/colonio/api/colonio/v1alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SeedServiceName is the fully-qualified name of the SeedService service.
	SeedServiceName = "api.colonio.v1alpha.SeedService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SeedServiceAssignNodeIDProcedure is the fully-qualified name of the SeedService's AssignNodeID
	// RPC.
	SeedServiceAssignNodeIDProcedure = "/api.colonio.v1alpha.SeedService/AssignNodeID"
	// SeedServiceSendSignalProcedure is the fully-qualified name of the SeedService's SendSignal RPC.
	SeedServiceSendSignalProcedure = "/api.colonio.v1alpha.SeedService/SendSignal"
	// SeedServicePollSignalProcedure is the fully-qualified name of the SeedService's PollSignal RPC.
	SeedServicePollSignalProcedure = "/api.colonio.v1alpha.SeedService/PollSignal"
)

// SeedServiceClient is a client for the api.colonio.v1alpha.SeedService service.
type SeedServiceClient interface {
	AssignNodeID(context.Context, *connect.Request[v1alpha.AssignNodeIDRequest]) (*connect.Response[v1alpha.AssignNodeIDResponse], error)
	SendSignal(context.Context, *connect.Request[v1alpha.SendSignalRequest]) (*connect.Response[v1alpha.SendSignalResponse], error)
	PollSignal(context.Context, *connect.Request[v1alpha.PollSignalRequest]) (*connect.ServerStreamForClient[v1alpha.PollSignalResponse], error)
}

// NewSeedServiceClient constructs a client for the api.colonio.v1alpha.SeedService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSeedServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SeedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	seedServiceMethods := v1alpha.File_api_colonio_v1alpha_seed_proto.Services().ByName("SeedService").Methods()
	return &seedServiceClient{
		assignNodeID: connect.NewClient[v1alpha.AssignNodeIDRequest, v1alpha.AssignNodeIDResponse](
			httpClient,
			baseURL+SeedServiceAssignNodeIDProcedure,
			connect.WithSchema(seedServiceMethods.ByName("AssignNodeID")),
			connect.WithClientOptions(opts...),
		),
		sendSignal: connect.NewClient[v1alpha.SendSignalRequest, v1alpha.SendSignalResponse](
			httpClient,
			baseURL+SeedServiceSendSignalProcedure,
			connect.WithSchema(seedServiceMethods.ByName("SendSignal")),
			connect.WithClientOptions(opts...),
		),
		pollSignal: connect.NewClient[v1alpha.PollSignalRequest, v1alpha.PollSignalResponse](
			httpClient,
			baseURL+SeedServicePollSignalProcedure,
			connect.WithSchema(seedServiceMethods.ByName("PollSignal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// seedServiceClient implements SeedServiceClient.
type seedServiceClient struct {
	assignNodeID *connect.Client[v1alpha.AssignNodeIDRequest, v1alpha.AssignNodeIDResponse]
	sendSignal   *connect.Client[v1alpha.SendSignalRequest, v1alpha.SendSignalResponse]
	pollSignal   *connect.Client[v1alpha.PollSignalRequest, v1alpha.PollSignalResponse]
}

// AssignNodeID calls api.colonio.v1alpha.SeedService.AssignNodeID.
func (c *seedServiceClient) AssignNodeID(ctx context.Context, req *connect.Request[v1alpha.AssignNodeIDRequest]) (*connect.Response[v1alpha.AssignNodeIDResponse], error) {
	return c.assignNodeID.CallUnary(ctx, req)
}

// SendSignal calls api.colonio.v1alpha.SeedService.SendSignal.
func (c *seedServiceClient) SendSignal(ctx context.Context, req *connect.Request[v1alpha.SendSignalRequest]) (*connect.Response[v1alpha.SendSignalResponse], error) {
	return c.sendSignal.CallUnary(ctx, req)
}

// PollSignal calls api.colonio.v1alpha.SeedService.PollSignal.
func (c *seedServiceClient) PollSignal(ctx context.Context, req *connect.Request[v1alpha.PollSignalRequest]) (*connect.ServerStreamForClient[v1alpha.PollSignalResponse], error) {
	return c.pollSignal.CallServerStream(ctx, req)
}

// SeedServiceHandler is an implementation of the api.colonio.v1alpha.SeedService service.
type SeedServiceHandler interface {
	AssignNodeID(context.Context, *connect.Request[v1alpha.AssignNodeIDRequest]) (*connect.Response[v1alpha.AssignNodeIDResponse], error)
	SendSignal(context.Context, *connect.Request[v1alpha.SendSignalRequest]) (*connect.Response[v1alpha.SendSignalResponse], error)
	PollSignal(context.Context, *connect.Request[v1alpha.PollSignalRequest], *connect.ServerStream[v1alpha.PollSignalResponse]) error
}

// NewSeedServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSeedServiceHandler(svc SeedServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	seedServiceMethods := v1alpha.File_api_colonio_v1alpha_seed_proto.Services().ByName("SeedService").Methods()
	seedServiceAssignNodeIDHandler := connect.NewUnaryHandler(
		SeedServiceAssignNodeIDProcedure,
		svc.AssignNodeID,
		connect.WithSchema(seedServiceMethods.ByName("AssignNodeID")),
		connect.WithHandlerOptions(opts...),
	)
	seedServiceSendSignalHandler := connect.NewUnaryHandler(
		SeedServiceSendSignalProcedure,
		svc.SendSignal,
		connect.WithSchema(seedServiceMethods.ByName("SendSignal")),
		connect.WithHandlerOptions(opts...),
	)
	seedServicePollSignalHandler := connect.NewServerStreamHandler(
		SeedServicePollSignalProcedure,
		svc.PollSignal,
		connect.WithSchema(seedServiceMethods.ByName("PollSignal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.colonio.v1alpha.SeedService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SeedServiceAssignNodeIDProcedure:
			seedServiceAssignNodeIDHandler.ServeHTTP(w, r)
		case SeedServiceSendSignalProcedure:
			seedServiceSendSignalHandler.ServeHTTP(w, r)
		case SeedServicePollSignalProcedure:
			seedServicePollSignalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSeedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSeedServiceHandler struct{}

func (UnimplementedSeedServiceHandler) AssignNodeID(context.Context, *connect.Request[v1alpha.AssignNodeIDRequest]) (*connect.Response[v1alpha.AssignNodeIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.colonio.v1alpha.SeedService.AssignNodeID is not implemented"))
}

func (UnimplementedSeedServiceHandler) SendSignal(context.Context, *connect.Request[v1alpha.SendSignalRequest]) (*connect.Response[v1alpha.SendSignalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.colonio.v1alpha.SeedService.SendSignal is not implemented"))
}

func (UnimplementedSeedServiceHandler) PollSignal(context.Context, *connect.Request[v1alpha.PollSignalRequest], *connect.ServerStream[v1alpha.PollSignalResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.colonio.v1alpha.SeedService.PollSignal is not implemented"))
}
