// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/colonio/v1alpha/seed.proto

package v1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignalOfferType int32

const (
	SignalOfferType_EXPLICIT SignalOfferType = 0
	SignalOfferType_NEXT     SignalOfferType = 1
)

// Enum value maps for SignalOfferType.
var (
	SignalOfferType_name = map[int32]string{
		0: "EXPLICIT",
		1: "NEXT",
	}
	SignalOfferType_value = map[string]int32{
		"EXPLICIT": 0,
		"NEXT":     1,
	}
)

func (x SignalOfferType) Enum() *SignalOfferType {
	p := new(SignalOfferType)
	*p = x
	return p
}

func (x SignalOfferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalOfferType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_colonio_v1alpha_seed_proto_enumTypes[0].Descriptor()
}

func (SignalOfferType) Type() protoreflect.EnumType {
	return &file_api_colonio_v1alpha_seed_proto_enumTypes[0]
}

func (x SignalOfferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalOfferType.Descriptor instead.
func (SignalOfferType) EnumDescriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{0}
}

type Signal struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	DstNodeId *NodeID                `protobuf:"bytes,1,opt,name=dst_node_id,json=dstNodeId,proto3" json:"dst_node_id,omitempty"`
	SrcNodeId *NodeID                `protobuf:"bytes,2,opt,name=src_node_id,json=srcNodeId,proto3" json:"src_node_id,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*Signal_Offer
	//	*Signal_Answer
	//	*Signal_Ice
	Content       isSignal_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signal) Reset() {
	*x = Signal{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{0}
}

func (x *Signal) GetDstNodeId() *NodeID {
	if x != nil {
		return x.DstNodeId
	}
	return nil
}

func (x *Signal) GetSrcNodeId() *NodeID {
	if x != nil {
		return x.SrcNodeId
	}
	return nil
}

func (x *Signal) GetContent() isSignal_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Signal) GetOffer() *SignalOffer {
	if x != nil {
		if x, ok := x.Content.(*Signal_Offer); ok {
			return x.Offer
		}
	}
	return nil
}

func (x *Signal) GetAnswer() *SignalAnswer {
	if x != nil {
		if x, ok := x.Content.(*Signal_Answer); ok {
			return x.Answer
		}
	}
	return nil
}

func (x *Signal) GetIce() *SignalICE {
	if x != nil {
		if x, ok := x.Content.(*Signal_Ice); ok {
			return x.Ice
		}
	}
	return nil
}

type isSignal_Content interface {
	isSignal_Content()
}

type Signal_Offer struct {
	Offer *SignalOffer `protobuf:"bytes,3,opt,name=offer,proto3,oneof"`
}

type Signal_Answer struct {
	Answer *SignalAnswer `protobuf:"bytes,4,opt,name=answer,proto3,oneof"`
}

type Signal_Ice struct {
	Ice *SignalICE `protobuf:"bytes,5,opt,name=ice,proto3,oneof"`
}

func (*Signal_Offer) isSignal_Content() {}

func (*Signal_Answer) isSignal_Content() {}

func (*Signal_Ice) isSignal_Content() {}

type SignalOffer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OfferId       uint32                 `protobuf:"varint,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	Type          SignalOfferType        `protobuf:"varint,2,opt,name=type,proto3,enum=api.colonio.v1alpha.SignalOfferType" json:"type,omitempty"`
	Sdp           string                 `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalOffer) Reset() {
	*x = SignalOffer{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOffer) ProtoMessage() {}

func (x *SignalOffer) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOffer.ProtoReflect.Descriptor instead.
func (*SignalOffer) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{1}
}

func (x *SignalOffer) GetOfferId() uint32 {
	if x != nil {
		return x.OfferId
	}
	return 0
}

func (x *SignalOffer) GetType() SignalOfferType {
	if x != nil {
		return x.Type
	}
	return SignalOfferType_EXPLICIT
}

func (x *SignalOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type SignalAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OfferId       uint32                 `protobuf:"varint,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	Status        uint32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Sdp           string                 `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalAnswer) Reset() {
	*x = SignalAnswer{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalAnswer) ProtoMessage() {}

func (x *SignalAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalAnswer.ProtoReflect.Descriptor instead.
func (*SignalAnswer) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{2}
}

func (x *SignalAnswer) GetOfferId() uint32 {
	if x != nil {
		return x.OfferId
	}
	return 0
}

func (x *SignalAnswer) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SignalAnswer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type SignalICE struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OfferId       uint32                 `protobuf:"varint,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	Ices          []string               `protobuf:"bytes,2,rep,name=ices,proto3" json:"ices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalICE) Reset() {
	*x = SignalICE{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalICE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalICE) ProtoMessage() {}

func (x *SignalICE) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalICE.ProtoReflect.Descriptor instead.
func (*SignalICE) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{3}
}

func (x *SignalICE) GetOfferId() uint32 {
	if x != nil {
		return x.OfferId
	}
	return 0
}

func (x *SignalICE) GetIces() []string {
	if x != nil {
		return x.Ices
	}
	return nil
}

type AssignNodeIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignNodeIDRequest) Reset() {
	*x = AssignNodeIDRequest{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignNodeIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNodeIDRequest) ProtoMessage() {}

func (x *AssignNodeIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNodeIDRequest.ProtoReflect.Descriptor instead.
func (*AssignNodeIDRequest) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{4}
}

type AssignNodeIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        *NodeID                `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	IsAlone       bool                   `protobuf:"varint,2,opt,name=is_alone,json=isAlone,proto3" json:"is_alone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignNodeIDResponse) Reset() {
	*x = AssignNodeIDResponse{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignNodeIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNodeIDResponse) ProtoMessage() {}

func (x *AssignNodeIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNodeIDResponse.ProtoReflect.Descriptor instead.
func (*AssignNodeIDResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{5}
}

func (x *AssignNodeIDResponse) GetNodeId() *NodeID {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *AssignNodeIDResponse) GetIsAlone() bool {
	if x != nil {
		return x.IsAlone
	}
	return false
}

type SendSignalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signal        *Signal                `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSignalRequest) Reset() {
	*x = SendSignalRequest{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignalRequest) ProtoMessage() {}

func (x *SendSignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignalRequest.ProtoReflect.Descriptor instead.
func (*SendSignalRequest) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{6}
}

func (x *SendSignalRequest) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

type SendSignalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsAlone       bool                   `protobuf:"varint,1,opt,name=is_alone,json=isAlone,proto3" json:"is_alone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSignalResponse) Reset() {
	*x = SendSignalResponse{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSignalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignalResponse) ProtoMessage() {}

func (x *SendSignalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignalResponse.ProtoReflect.Descriptor instead.
func (*SendSignalResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{7}
}

func (x *SendSignalResponse) GetIsAlone() bool {
	if x != nil {
		return x.IsAlone
	}
	return false
}

type PollSignalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollSignalRequest) Reset() {
	*x = PollSignalRequest{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollSignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollSignalRequest) ProtoMessage() {}

func (x *PollSignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollSignalRequest.ProtoReflect.Descriptor instead.
func (*PollSignalRequest) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{8}
}

type PollSignalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signals       []*Signal              `protobuf:"bytes,1,rep,name=signals,proto3" json:"signals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollSignalResponse) Reset() {
	*x = PollSignalResponse{}
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollSignalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollSignalResponse) ProtoMessage() {}

func (x *PollSignalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_colonio_v1alpha_seed_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollSignalResponse.ProtoReflect.Descriptor instead.
func (*PollSignalResponse) Descriptor() ([]byte, []int) {
	return file_api_colonio_v1alpha_seed_proto_rawDescGZIP(), []int{9}
}

func (x *PollSignalResponse) GetSignals() []*Signal {
	if x != nil {
		return x.Signals
	}
	return nil
}

var File_api_colonio_v1alpha_seed_proto protoreflect.FileDescriptor

var file_api_colonio_v1alpha_seed_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x06, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x09, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x43,
	0x45, 0x48, 0x00, 0x52, 0x03, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x53, 0x0a, 0x0c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x3a,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x43, 0x45, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x67, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x22, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x12, 0x50, 0x6f,
	0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x07,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2a, 0x29, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54,
	0x10, 0x01, 0x32, 0xb8, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x50, 0x6f,
	0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x35, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x64, 0x61, 0x2d, 0x6a, 0x70, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_colonio_v1alpha_seed_proto_rawDescOnce sync.Once
	file_api_colonio_v1alpha_seed_proto_rawDescData []byte
)

func file_api_colonio_v1alpha_seed_proto_rawDescGZIP() []byte {
	file_api_colonio_v1alpha_seed_proto_rawDescOnce.Do(func() {
		file_api_colonio_v1alpha_seed_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_colonio_v1alpha_seed_proto_rawDesc), len(file_api_colonio_v1alpha_seed_proto_rawDesc)))
	})
	return file_api_colonio_v1alpha_seed_proto_rawDescData
}

var file_api_colonio_v1alpha_seed_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_colonio_v1alpha_seed_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_colonio_v1alpha_seed_proto_goTypes = []any{
	(SignalOfferType)(0),         // 0: api.colonio.v1alpha.SignalOfferType
	(*Signal)(nil),               // 1: api.colonio.v1alpha.Signal
	(*SignalOffer)(nil),          // 2: api.colonio.v1alpha.SignalOffer
	(*SignalAnswer)(nil),         // 3: api.colonio.v1alpha.SignalAnswer
	(*SignalICE)(nil),            // 4: api.colonio.v1alpha.SignalICE
	(*AssignNodeIDRequest)(nil),  // 5: api.colonio.v1alpha.AssignNodeIDRequest
	(*AssignNodeIDResponse)(nil), // 6: api.colonio.v1alpha.AssignNodeIDResponse
	(*SendSignalRequest)(nil),    // 7: api.colonio.v1alpha.SendSignalRequest
	(*SendSignalResponse)(nil),   // 8: api.colonio.v1alpha.SendSignalResponse
	(*PollSignalRequest)(nil),    // 9: api.colonio.v1alpha.PollSignalRequest
	(*PollSignalResponse)(nil),   // 10: api.colonio.v1alpha.PollSignalResponse
	(*NodeID)(nil),               // 11: api.colonio.v1alpha.NodeID
}
var file_api_colonio_v1alpha_seed_proto_depIdxs = []int32{
	11, // 0: api.colonio.v1alpha.Signal.dst_node_id:type_name -> api.colonio.v1alpha.NodeID
	11, // 1: api.colonio.v1alpha.Signal.src_node_id:type_name -> api.colonio.v1alpha.NodeID
	2,  // 2: api.colonio.v1alpha.Signal.offer:type_name -> api.colonio.v1alpha.SignalOffer
	3,  // 3: api.colonio.v1alpha.Signal.answer:type_name -> api.colonio.v1alpha.SignalAnswer
	4,  // 4: api.colonio.v1alpha.Signal.ice:type_name -> api.colonio.v1alpha.SignalICE
	0,  // 5: api.colonio.v1alpha.SignalOffer.type:type_name -> api.colonio.v1alpha.SignalOfferType
	11, // 6: api.colonio.v1alpha.AssignNodeIDResponse.node_id:type_name -> api.colonio.v1alpha.NodeID
	1,  // 7: api.colonio.v1alpha.SendSignalRequest.signal:type_name -> api.colonio.v1alpha.Signal
	1,  // 8: api.colonio.v1alpha.PollSignalResponse.signals:type_name -> api.colonio.v1alpha.Signal
	5,  // 9: api.colonio.v1alpha.SeedService.AssignNodeID:input_type -> api.colonio.v1alpha.AssignNodeIDRequest
	7,  // 10: api.colonio.v1alpha.SeedService.SendSignal:input_type -> api.colonio.v1alpha.SendSignalRequest
	9,  // 11: api.colonio.v1alpha.SeedService.PollSignal:input_type -> api.colonio.v1alpha.PollSignalRequest
	6,  // 12: api.colonio.v1alpha.SeedService.AssignNodeID:output_type -> api.colonio.v1alpha.AssignNodeIDResponse
	8,  // 13: api.colonio.v1alpha.SeedService.SendSignal:output_type -> api.colonio.v1alpha.SendSignalResponse
	10, // 14: api.colonio.v1alpha.SeedService.PollSignal:output_type -> api.colonio.v1alpha.PollSignalResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_colonio_v1alpha_seed_proto_init() }
func file_api_colonio_v1alpha_seed_proto_init() {
	if File_api_colonio_v1alpha_seed_proto != nil {
		return
	}
	file_api_colonio_v1alpha_colonio_proto_init()
	file_api_colonio_v1alpha_seed_proto_msgTypes[0].OneofWrappers = []any{
		(*Signal_Offer)(nil),
		(*Signal_Answer)(nil),
		(*Signal_Ice)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_colonio_v1alpha_seed_proto_rawDesc), len(file_api_colonio_v1alpha_seed_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_colonio_v1alpha_seed_proto_goTypes,
		DependencyIndexes: file_api_colonio_v1alpha_seed_proto_depIdxs,
		EnumInfos:         file_api_colonio_v1alpha_seed_proto_enumTypes,
		MessageInfos:      file_api_colonio_v1alpha_seed_proto_msgTypes,
	}.Build()
	File_api_colonio_v1alpha_seed_proto = out.File
	file_api_colonio_v1alpha_seed_proto_goTypes = nil
	file_api_colonio_v1alpha_seed_proto_depIdxs = nil
}
